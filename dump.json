[
  {
    "__docId__": 0,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/cli.js",
    "memberof": null,
    "longname": "src/cli.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "// Import the neccesary modules.\r\nimport bytes from \"bytes\";\r\nimport parseTorrent from \"parse-torrent\";\r\nimport program from \"commander\";\r\nimport prompt from \"prompt\";\r\nimport torrentHealth from \"torrent-tracker-health\";\r\n\r\nimport Index from \"./index\";\r\nimport MovieHelper from \"./providers/movie/helper\";\r\nimport packageJSON from \"../package.json\";\r\nimport Setup from \"./config/setup\";\r\nimport ShowHelper from \"./providers/show/helper\";\r\nimport Util from \"./util\";\r\n\r\n/** Class The class for the command line interface. */\r\nexport default class CLI {\r\n\r\n  /**\r\n   * Create a cli object.\r\n   * @param {String} [providerName=CLI] - The default provider name.\r\n   */\r\n  constructor(providerName = \"CLI\") {\r\n    /**\r\n     * The util object with general functions.\r\n     * @type {Util}\r\n     */\r\n    this._util = new Util();\r\n\r\n    // Setup the CLI program.\r\n    program\r\n      .version(`${packageJSON.name} v${packageJSON.version}`)\r\n      .option(\"-c, --content <type>\", \"Add content from the MongoDB database (show | movie).\", /^(show)|^(movie)/i, false)\r\n      .option(\"-r, --run\", \"Run the API and start the scraping process.\")\r\n      .option(\"-s, --server\", \"Run the API without starting the scraping process.\");\r\n\r\n    // Extra output on top of the default help output\r\n    program.on(\"--help\", () => {\r\n      console.log(\"  Examples:\");\r\n      console.log(\"\");\r\n      console.log(\"    $ popcorn-api -c <movie|show>\");\r\n      console.log(\"    $ popcorn-api --content <movie|show>\");\r\n      console.log(\"\");\r\n      console.log(\"    $ popcorn-api -r\");\r\n      console.log(\"    $ popcorn-api --run\");\r\n      console.log(\"\");\r\n      console.log(\"    $ popcorn-api -s\");\r\n      console.log(\"    $ popcorn-api --server\");\r\n      console.log(\"\");\r\n    });\r\n\r\n    // Parse the command line arguments.\r\n    program.parse(process.argv);\r\n\r\n    // The imdb property.\r\n    const imdb = {\r\n      description: \"The imdb id of the show/movie to add (tt1234567)\",\r\n      type: \"string\",\r\n      pattern: /^(tt\\d{7})/i,\r\n      message: \"Not a valid imdb id.\",\r\n      required: true\r\n    };\r\n\r\n    // The torrent property.\r\n    const torrent = {\r\n      description: \"The link of the torrent to add\",\r\n      type: \"string\",\r\n      message: \"Not a valid torrent.\",\r\n      required: true\r\n    };\r\n\r\n    // The language property.\r\n    const language = {\r\n      description: \"The language of the torrent to add (en, fr, jp)\",\r\n      type: \"string\",\r\n      pattern: /^([a-zA-Z]{2})/i,\r\n      message: \"Not a valid language\",\r\n      required: true\r\n    }\r\n\r\n    // The quality property.\r\n    const quality = {\r\n      description: \"The quality of the torrent (480p | 720p | 1080p)\",\r\n      type: \"string\",\r\n      pattern: /^(480p|720p|1080p)/i,\r\n      message: \"Not a valid quality.\",\r\n      required: true\r\n    };\r\n\r\n    // The season property.\r\n    const season = {\r\n      description: \"The season number of the torrent\",\r\n      type: \"integer\",\r\n      pattern: /^(\\d+)/i,\r\n      message: \"Not a valid season.\",\r\n      required: true\r\n    };\r\n\r\n    // The episode property.\r\n    const episode = {\r\n      description: \"The episode number of the torrent\",\r\n      type: \"integer\",\r\n      pattern: /^(\\d+)/i,\r\n      message: \"Not a valid episode.\",\r\n      required: true\r\n    };\r\n\r\n    /**\r\n     * The shema used by `prompt` insert a movie.\r\n     * @type {Object}\r\n     */\r\n    this._movieSchema = {\r\n      properties: {\r\n        \"imdb\": imdb,\r\n        \"language\": language,\r\n        \"torrent\": torrent,\r\n        \"quality\": quality\r\n      }\r\n    };\r\n\r\n    /**\r\n     * The shema used by `prompt` insert a show.\r\n     * @type {Object}\r\n     */\r\n    this._showSchema = {\r\n      properties: {\r\n        \"imdb\": imdb,\r\n        \"season\": season,\r\n        \"episode\": episode,\r\n        \"torrent\": torrent,\r\n        \"quality\": quality\r\n      }\r\n    };\r\n  };\r\n\r\n  /**\r\n   * Get movie data from a given torrent url.\r\n   * @param {String} torrent - The url of the torrent.\r\n   * @param {String} language - The language of the torrent.\r\n   * @param {String} quality - The quality of the torrent.\r\n   * @returns {Promise} - Movie data from the torrent.\r\n   */\r\n  _getMovieTorrentDataRemote(torrent, language, quality) {\r\n    return new Promise((resolve, reject) => {\r\n      parseTorrent.remote(torrent, (err, result) => {\r\n        if (err) return reject(err);\r\n\r\n        const magnet = parseTorrent.toMagnetURI(result);\r\n        torrentHealth(magnet).then(res => {\r\n          const { seeds, peers } = res;\r\n          const data = {};\r\n          if (!data[language]) data[language] = {};\r\n          if (!data[language][quality]) data[language][quality] = {\r\n            url: magnet,\r\n            seed: seeds,\r\n            peer: peers,\r\n            size: result.length,\r\n            filesize: bytes(result.length),\r\n            provider: providerName\r\n          };\r\n          return resolve(data);\r\n        }).catch(err => reject(err));\r\n      });\r\n    });\r\n  };\r\n\r\n  /** Adds a movie to the database through the CLI. */\r\n  _moviePrompt() {\r\n    prompt.get(this._movieSchema, async(err, result) => {\r\n      if (err) {\r\n        util.onError(`An error occurred: ${err}`);\r\n        process.exit(1);\r\n      } else {\r\n        try {\r\n          const { imdb, quality, language, torrent } = result;\r\n          const movieHelper = new MovieHelper(providerName);\r\n          const newMovie = await movieHelper.getTraktInfo(imdb);\r\n          if (newMovie && newMovie._id) {\r\n            const data = await getMovieTorrentDataRemote(torrent, language, quality);\r\n            await movieHelper.addTorrents(newMovie, data);\r\n            process.exit(0);\r\n          }\r\n        } catch (err) {\r\n          this._util.onError(`An error occurred: ${err}`);\r\n          process.exit(1);\r\n        }\r\n      }\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Get show data from a given torrent url.\r\n   * @param {String} torrent - The url of the torrent.\r\n   * @param {String} quality - The quality of the torrent.\r\n   * @param {Integer} season - The season of the show from the torrent file.\r\n   * @param {Integer} episode - The episode of the show from the torrent.\r\n   * @returns {Promise} - Show data from the torrent.\r\n   */\r\n  _getShowTorrentDataRemote(torrent, quality, season, episode) {\r\n    return new Promise((resolve, reject) => {\r\n      parseTorrent.remote(torrent, (err, result) => {\r\n        if (err) return reject(err);\r\n\r\n        const magnet = parseTorrent.toMagnetURI(result);\r\n        torrentHealth(magnet).then(res => {\r\n          const { seeds, peers } = res;\r\n          const data = {};\r\n          if (!data[season]) data[season] = {};\r\n          if (!data[season][episode]) data[season][episode] = {};\r\n          if (!data[season][episode][quality]) data[season][episode][quality] = {\r\n            url: magnet,\r\n            seeds,\r\n            peers,\r\n            provider: providerName\r\n          };\r\n          return resolve(data);\r\n        }).catch(err => reject(err));\r\n      });\r\n    });\r\n  };\r\n\r\n  /** Adds a show to the database through the CLI. */\r\n  _showPrompt() {\r\n    prompt.get(this._showSchema, async(err, result) => {\r\n      if (err) {\r\n        util.onError(`An error occurred: ${err}`);\r\n        process.exit(1);\r\n      } else {\r\n        try {\r\n          const { imdb, season, episode, quality, torrent } = result;\r\n          const showHelper = new ShowHelper(providerName);\r\n          const newShow = await showHelper.getTraktInfo(imdb);\r\n          if (newShow && newShow._id) {\r\n            const data = await getShowTorrentDataRemote(torrent, quality, season, episode);\r\n            await showHelper.addEpisodes(newShow, data, imdb);\r\n            process.exit(0);\r\n          }\r\n        } catch (err) {\r\n          this._util.onError(`An error occurred: ${err}`);\r\n          process.exit(1);\r\n        }\r\n      }\r\n    });\r\n  };\r\n\r\n  /** Run the CLI program. */\r\n  run() {\r\n    if (program.run) {\r\n      new Index({start: true, pretty: false, debug: false});\r\n    } else if (program.server) {\r\n      new Index({start: false, pretty: false, debug: false});\r\n    } else if (program.content) {\r\n      prompt.start();\r\n      Setup.connectMongoDB();\r\n\r\n      if (program.content.match(/^(show)/i)) {\r\n        this._showPrompt();\r\n      } else if (program.content.match(/^(movie)/i)) {\r\n        this._moviePrompt();\r\n      }\r\n    } else {\r\n      this._util.onError(\"\\n  \\x1b[31mError:\\x1b[36m No valid command given. Please check below:\\x1b[0m\");\r\n      program.help();\r\n    }\r\n  };\r\n\r\n};\r\n"
  },
  {
    "__docId__": 1,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "CLI",
    "memberof": "src/cli.js",
    "longname": "src/cli.js~CLI",
    "access": null,
    "export": true,
    "importPath": "popcorn-api/src/cli.js",
    "importStyle": "CLI",
    "description": "Class The class for the command line interface.",
    "lineNumber": 16,
    "interface": false
  },
  {
    "__docId__": 2,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/cli.js~CLI",
    "longname": "src/cli.js~CLI#constructor",
    "access": null,
    "description": "Create a cli object.",
    "lineNumber": 22,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "CLI",
        "defaultRaw": "CLI",
        "name": "providerName",
        "description": "The default provider name."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 3,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_util",
    "memberof": "src/cli.js~CLI",
    "longname": "src/cli.js~CLI#_util",
    "access": null,
    "description": "The util object with general functions.",
    "lineNumber": 27,
    "type": {
      "nullable": null,
      "types": [
        "Util"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 4,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_movieSchema",
    "memberof": "src/cli.js~CLI",
    "longname": "src/cli.js~CLI#_movieSchema",
    "access": null,
    "description": "The shema used by `prompt` insert a movie.",
    "lineNumber": 111,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 5,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_showSchema",
    "memberof": "src/cli.js~CLI",
    "longname": "src/cli.js~CLI#_showSchema",
    "access": null,
    "description": "The shema used by `prompt` insert a show.",
    "lineNumber": 124,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 6,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_getMovieTorrentDataRemote",
    "memberof": "src/cli.js~CLI",
    "longname": "src/cli.js~CLI#_getMovieTorrentDataRemote",
    "access": null,
    "description": "Get movie data from a given torrent url.",
    "lineNumber": 142,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} - Movie data from the torrent."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "torrent",
        "description": "The url of the torrent."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "language",
        "description": "The language of the torrent."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "quality",
        "description": "The quality of the torrent."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Movie data from the torrent."
    },
    "generator": false
  },
  {
    "__docId__": 7,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_moviePrompt",
    "memberof": "src/cli.js~CLI",
    "longname": "src/cli.js~CLI#_moviePrompt",
    "access": null,
    "description": "Adds a movie to the database through the CLI.",
    "lineNumber": 167,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 8,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_getShowTorrentDataRemote",
    "memberof": "src/cli.js~CLI",
    "longname": "src/cli.js~CLI#_getShowTorrentDataRemote",
    "access": null,
    "description": "Get show data from a given torrent url.",
    "lineNumber": 198,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} - Show data from the torrent."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "torrent",
        "description": "The url of the torrent."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "quality",
        "description": "The quality of the torrent."
      },
      {
        "nullable": null,
        "types": [
          "Integer"
        ],
        "spread": false,
        "optional": false,
        "name": "season",
        "description": "The season of the show from the torrent file."
      },
      {
        "nullable": null,
        "types": [
          "Integer"
        ],
        "spread": false,
        "optional": false,
        "name": "episode",
        "description": "The episode of the show from the torrent."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Show data from the torrent."
    },
    "generator": false
  },
  {
    "__docId__": 9,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_showPrompt",
    "memberof": "src/cli.js~CLI",
    "longname": "src/cli.js~CLI#_showPrompt",
    "access": null,
    "description": "Adds a show to the database through the CLI.",
    "lineNumber": 222,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 10,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "run",
    "memberof": "src/cli.js~CLI",
    "longname": "src/cli.js~CLI#run",
    "access": null,
    "description": "Run the CLI program.",
    "lineNumber": 246,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 11,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/config/constants.js",
    "memberof": null,
    "longname": "src/config/constants.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "// Import the neccesary modules.\r\nimport path from \"path\";\r\nimport Trakt from \"trakt.tv\";\r\n\r\n/**\r\n * The providers for scraping KAT for anime.\r\n * @type {Array}\r\n */\r\nexport const animeProviders = [];\r\n\r\n/**\r\n * The cron time for scraping torrents. Default is `0 0 *\\/6 * * *`.\r\n * @type {String}\r\n */\r\nexport const cronTime = \"0 0 */6 * * *\";\r\n\r\n/**\r\n * The host of the server of the database. Default is `[\"localhost\"]`.\r\n * @type {Array} dbHosts\r\n */\r\nexport const dbHosts = [\"localhost\"];\r\n\r\n/**\r\n * Map object for correcting anime slugs form KAT.\r\n * @type {Object}\r\n */\r\nexport const katAnimeMap = {\r\n  \"kabaneri-of-the-iron-fortress\": \"koutetsujou-no-kabaneri\",\r\n  \"luck-&-logic\": \"luck-logic\",\r\n  \"naruto-shippuuden\": \"naruto-shippuden\",\r\n  \"norn9norn+nonet\": \"norn9-norn-nonet\",\r\n  \"sailor-moon-crystal\": \"bishoujo-senshi-sailor-moon-crystal\",\r\n  \"yuruyuri\": \"yuru-yuri\"\r\n};\r\n\r\n/**\r\n * Map object for correcting show slugs form KAT.\r\n * @type {Object}\r\n */\r\nexport const katShowMap = {\r\n  \"60-minutes-us\": \"60-minutes\",\r\n  \"american-crime\": \"american-crime-1969\",\r\n  \"bachelor-live\": \"the-bachelor-live\",\r\n  \"ballers-2015\": \"ballers\",\r\n  \"big-brother-us\": \"big-brother-2000\",\r\n  \"blackish\": \"black-ish\",\r\n  \"bobs-burgers\": \"bob-s-burgers\",\r\n  \"bordertown-2015\": \"bordertown-2016\",\r\n  \"celebrity-big-brother\": \"celebrity-big-brother-2001\",\r\n  \"chicago-pd\": \"chicago-p-d\",\r\n  \"childrens-hospital-us\": \"childrens-hospital\",\r\n  \"cooper-barretts-guide-to-surviving-life\": \"cooper-barrett-s-guide-to-surviving-life-2016\",\r\n  \"cosmos-a-space-time-odyssey\": \"cosmos-a-spacetime-odyssey\",\r\n  \"dcs-legends-of-tomorrow\": \"dc-s-legends-of-tomorrow\",\r\n  \"doll-and-em\": \"doll-em\",\r\n  \"gold-rush\": \"gold-rush-2010\",\r\n  \"greys-anatomy\": \"grey-s-anatomy\",\r\n  \"hawaii-five-0-2010\": \"hawaii-five-0\",\r\n  \"heartland-ca\": \"heartland-2007-ca\",\r\n  \"hells-kitchen-us\": \"hell-s-kitchen-2005\",\r\n  \"house-of-cards-2013\": \"house-of-cards\",\r\n  \"how-its-made-dream-cars\": \"how-it-s-made-dream-cars\",\r\n  \"how-its-made\": \"how-it-s-made\",\r\n  \"intelligence-us\": \"intelligence-2014\",\r\n  \"its-always-sunny-in-philadelphia\": \"it-s-always-sunny-in-philadelphia\",\r\n  \"james-mays-cars-of-the-people\": \"james-may-s-cars-of-the-people\",\r\n  \"jericho-2016\": \"jericho-1969\",\r\n  \"kitchen-nightmares-us\": \"kitchen-nightmares\",\r\n  \"last-man-standing-us\": \"last-man-standing-2011\",\r\n  \"law-and-order-svu\": \"law-order-special-victims-unit\",\r\n  \"marvels-agent-carter\": \"marvel-s-agent-carter\",\r\n  \"marvels-agents-of-s-h-i-e-l-d\": \"marvel-s-agents-of-s-h-i-e-l-d\",\r\n  \"marvels-daredevil\": \"marvel-s-daredevil\",\r\n  \"marvels-jessica-jones\": \"marvel-s-jessica-jones\",\r\n  \"mike-and-molly\": \"mike-molly\",\r\n  \"perception\": \"perception-2012\",\r\n  \"power-2014\": \"power\",\r\n  \"prey-uk\": \"prey-2014\",\r\n  \"proof-us\": \"proof\",\r\n  \"reckless\": \"reckless-2014\",\r\n  \"resurrection-us\": \"resurrection-2014\",\r\n  \"revolution-2012\": \"revolution\",\r\n  \"rush-us\": \"rush-2014\",\r\n  \"sanctuary-us\": \"sanctuary\",\r\n  \"satisfaction-us\": \"satisfaction-2014\",\r\n  \"scandal-us\": \"scandal\",\r\n  \"schitts-creek\": \"schitt-s-creek\",\r\n  \"second-chance\": \"second-chance-2016\",\r\n  \"stan-lees-lucky-man\": \"stan-lee-s-lucky-man\",\r\n  \"survivors-remorse\": \"survivor-s-remorse\",\r\n  \"teen-wolf\": \"teen-wolf-2011\",\r\n  \"the-bridge-us\": \"the-bridge-2013\",\r\n  \"the-comedians-us\": \"the-comedians-2015\",\r\n  \"the-kennedys-uk\": \"the-kennedys-2015\",\r\n  \"the-league\": \"the-league-2009\",\r\n  \"the-librarians-us\": \"the-librarians-2014\",\r\n  \"the-magicians-us\": \"the-magicians\",\r\n  \"this-is-england-90\": \"this-is-england-90-2015\",\r\n  \"whose-line-is-it-anyway-us\": \"whose-line-is-it-anyway-1998\",\r\n  \"young-and-hungry\": \"young-hungry\",\r\n  \"youre-the-worst-2014\": \"you-re-the-worst\",\r\n  \"youre-the-worst\": \"you-re-the-worst\"\r\n};\r\n\r\n/**\r\n * Check if this instance of the API is the master. Default is `true`.\r\n * @type {Boolean}\r\n */\r\nexport const master = true;\r\n\r\n/**\r\n * The maximum web requests can take place at the same time. Default is `2`.\r\n * @type {Integer}\r\n */\r\nexport const maxWebRequest = 2;\r\n\r\n/**\r\n * The providers for scraping KAT for movies.\r\n * @type {Array}\r\n */\r\nexport const movieProviders = [\r\n  // English providers\r\n  {name: \"Megaradon\", query: {query: \"x264 720p | 1080p\", uploader: \"megaradon\", language: \"en\"}},\r\n  {name: \"Z0n321\", query: {query: \"x264 720p | 1080p\", uploader: \"z0n321\", language: \"en\"}},\r\n\r\n  // French providers\r\n  {name: \"French\", query: {query: \"720p | 1080p\", language: \"fr\"}},\r\n  // German providers\r\n  {name: \"German\", query: {query: \"720p | 1080p\", language: \"de\"}},\r\n  // Spanish providers\r\n  {name: \"Spanish\", query: {query: \"720p | 1080p\", language: \"es\"}},\r\n  // Ductch providers\r\n  {name: \"Dutch\", query: {query: \"720p | 1080p\", language: \"nl\"}}\r\n];\r\n\r\n/**\r\n * The amount of object show per page. Default is `50`.\r\n * @type {Integer}\r\n */\r\nexport const pageSize = 50;\r\n\r\n/**\r\n * The port on which the API will run on. Default is `5000`.\r\n * @type {Integer}\r\n */\r\nexport const port = 5000;\r\n\r\n/**\r\n * The promise object to override the mongoose promise object. Default is `global.Promise`.\r\n * @type {Promise}\r\n */\r\nexport const Promise = global.Promise;\r\n\r\n/**\r\n * The name of the server. Default is `serv01`.\r\n * @type {String}\r\n */\r\nexport const server = \"serv01\";\r\n\r\n/**\r\n * The providers for scraping KAT for shows.\r\n * @type {Array}\r\n */\r\nexport const showProviders = [\r\n  // 720p and 1080p providers\r\n  {name: \"Zoner720p\", query: {query: \"x264 720p\", uploader: \"z0n321\"}},\r\n  {name: \"Zoner1080p\", query: {query: \"x264 1080p\", uploader: \"z0n321\"}},\r\n  {name: \"Brasse0\", query: {query: \"x264\", uploader: \"brasse0\"}},\r\n  {name: \"ETHD\", query: {query: \"x264\", uploader: \"ethd\"}},\r\n\r\n  // Uploader providers\r\n  {name: \"ETTV\", query: {query: \"x264\", uploader: \"ettv\"}},\r\n  {name: \"KAT_EZTV\", query: {query: \"x264\", uploader: \"eztv\"}},\r\n  {name: \"VTV\", query: {query: \"x264\", uploader: \"vtv\"}},\r\n  {name: \"SRIGGA\", query: {query: \"x264\", uploader: \"ethd\"}},\r\n\r\n  // Zoner providers\r\n  {name: \"ZonerSD\", query: {query: \"x264 LOL | FLEET | KILLERS | W4F\", uploader: \"z0n321\"}}\r\n];\r\n\r\n/**\r\n * The name of the status file holding the `status` value for the index page. Default is `status.json`.\r\n * @type {String}\r\n */\r\nexport const statusFile = \"status.json\";\r\n\r\n/**\r\n * The path to the temprary directory.. Default is `./tmp`.\r\n * @type {String}\r\n */\r\nexport const tempDir = path.join(process.cwd(), \"tmp\");\r\n\r\n/**\r\n * The timezone the conjob will hold. Default is `America/Los_Angeles`.\r\n * @type {String}\r\n */\r\nexport const timeZone = \"America/Los_Angeles\";\r\n\r\n/**\r\n * A configured Trakt API.\r\n * @type {Trakt}\r\n */\r\nexport const trakt = new Trakt({client_id: \"70c43f8f4c0de74a33ac1e66b6067f11d14ad13e33cd4ebd08860ba8be014907\"});\r\n\r\n/**\r\n * The name of the updated file holding the `updated` value for the index page. Default is `lastUpdated.json`.\r\n * @type {String}\r\n */\r\nexport const updatedFile = \"lastUpdated.json\";\r\n\r\n/**\r\n * The maximum time a web request may take. Default is `2` seconds.\r\n * @type {Integer}\r\n */\r\nexport const webRequestTimeout = 2;\r\n\r\n/**\r\n * The amount of workers on the cluster. Default is `2`.\r\n * @type {Integer}\r\n */\r\nexport const workers = 2;\r\n"
  },
  {
    "__docId__": 12,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "animeProviders",
    "memberof": "src/config/constants.js",
    "longname": "src/config/constants.js~animeProviders",
    "access": null,
    "export": true,
    "importPath": "popcorn-api/src/config/constants.js",
    "importStyle": "{animeProviders}",
    "description": "The providers for scraping KAT for anime.",
    "lineNumber": 9,
    "type": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 13,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "cronTime",
    "memberof": "src/config/constants.js",
    "longname": "src/config/constants.js~cronTime",
    "access": null,
    "export": true,
    "importPath": "popcorn-api/src/config/constants.js",
    "importStyle": "{cronTime}",
    "description": "The cron time for scraping torrents. Default is `0 0 *\\/6 * * *`.",
    "lineNumber": 15,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 14,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "dbHosts",
    "memberof": "src/config/constants.js",
    "longname": "src/config/constants.js~dbHosts",
    "access": null,
    "export": true,
    "importPath": "popcorn-api/src/config/constants.js",
    "importStyle": "{dbHosts}",
    "description": "The host of the server of the database. Default is `[\"localhost\"]`.",
    "lineNumber": 21,
    "type": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 15,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "katAnimeMap",
    "memberof": "src/config/constants.js",
    "longname": "src/config/constants.js~katAnimeMap",
    "access": null,
    "export": true,
    "importPath": "popcorn-api/src/config/constants.js",
    "importStyle": "{katAnimeMap}",
    "description": "Map object for correcting anime slugs form KAT.",
    "lineNumber": 27,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 16,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "katShowMap",
    "memberof": "src/config/constants.js",
    "longname": "src/config/constants.js~katShowMap",
    "access": null,
    "export": true,
    "importPath": "popcorn-api/src/config/constants.js",
    "importStyle": "{katShowMap}",
    "description": "Map object for correcting show slugs form KAT.",
    "lineNumber": 40,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 17,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "master",
    "memberof": "src/config/constants.js",
    "longname": "src/config/constants.js~master",
    "access": null,
    "export": true,
    "importPath": "popcorn-api/src/config/constants.js",
    "importStyle": "{master}",
    "description": "Check if this instance of the API is the master. Default is `true`.",
    "lineNumber": 109,
    "type": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 18,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "maxWebRequest",
    "memberof": "src/config/constants.js",
    "longname": "src/config/constants.js~maxWebRequest",
    "access": null,
    "export": true,
    "importPath": "popcorn-api/src/config/constants.js",
    "importStyle": "{maxWebRequest}",
    "description": "The maximum web requests can take place at the same time. Default is `2`.",
    "lineNumber": 115,
    "type": {
      "nullable": null,
      "types": [
        "Integer"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 19,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "movieProviders",
    "memberof": "src/config/constants.js",
    "longname": "src/config/constants.js~movieProviders",
    "access": null,
    "export": true,
    "importPath": "popcorn-api/src/config/constants.js",
    "importStyle": "{movieProviders}",
    "description": "The providers for scraping KAT for movies.",
    "lineNumber": 121,
    "type": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 20,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "pageSize",
    "memberof": "src/config/constants.js",
    "longname": "src/config/constants.js~pageSize",
    "access": null,
    "export": true,
    "importPath": "popcorn-api/src/config/constants.js",
    "importStyle": "{pageSize}",
    "description": "The amount of object show per page. Default is `50`.",
    "lineNumber": 140,
    "type": {
      "nullable": null,
      "types": [
        "Integer"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 21,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "port",
    "memberof": "src/config/constants.js",
    "longname": "src/config/constants.js~port",
    "access": null,
    "export": true,
    "importPath": "popcorn-api/src/config/constants.js",
    "importStyle": "{port}",
    "description": "The port on which the API will run on. Default is `5000`.",
    "lineNumber": 146,
    "type": {
      "nullable": null,
      "types": [
        "Integer"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 22,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "Promise",
    "memberof": "src/config/constants.js",
    "longname": "src/config/constants.js~Promise",
    "access": null,
    "export": true,
    "importPath": "popcorn-api/src/config/constants.js",
    "importStyle": "{Promise}",
    "description": "The promise object to override the mongoose promise object. Default is `global.Promise`.",
    "lineNumber": 152,
    "type": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 23,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "server",
    "memberof": "src/config/constants.js",
    "longname": "src/config/constants.js~server",
    "access": null,
    "export": true,
    "importPath": "popcorn-api/src/config/constants.js",
    "importStyle": "{server}",
    "description": "The name of the server. Default is `serv01`.",
    "lineNumber": 158,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 24,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "showProviders",
    "memberof": "src/config/constants.js",
    "longname": "src/config/constants.js~showProviders",
    "access": null,
    "export": true,
    "importPath": "popcorn-api/src/config/constants.js",
    "importStyle": "{showProviders}",
    "description": "The providers for scraping KAT for shows.",
    "lineNumber": 164,
    "type": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 25,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "statusFile",
    "memberof": "src/config/constants.js",
    "longname": "src/config/constants.js~statusFile",
    "access": null,
    "export": true,
    "importPath": "popcorn-api/src/config/constants.js",
    "importStyle": "{statusFile}",
    "description": "The name of the status file holding the `status` value for the index page. Default is `status.json`.",
    "lineNumber": 185,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 26,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "tempDir",
    "memberof": "src/config/constants.js",
    "longname": "src/config/constants.js~tempDir",
    "access": null,
    "export": true,
    "importPath": "popcorn-api/src/config/constants.js",
    "importStyle": "{tempDir}",
    "description": "The path to the temprary directory.. Default is `./tmp`.",
    "lineNumber": 191,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 27,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "timeZone",
    "memberof": "src/config/constants.js",
    "longname": "src/config/constants.js~timeZone",
    "access": null,
    "export": true,
    "importPath": "popcorn-api/src/config/constants.js",
    "importStyle": "{timeZone}",
    "description": "The timezone the conjob will hold. Default is `America/Los_Angeles`.",
    "lineNumber": 197,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 28,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "trakt",
    "memberof": "src/config/constants.js",
    "longname": "src/config/constants.js~trakt",
    "access": null,
    "export": true,
    "importPath": "popcorn-api/src/config/constants.js",
    "importStyle": "{trakt}",
    "description": "A configured Trakt API.",
    "lineNumber": 203,
    "type": {
      "nullable": null,
      "types": [
        "Trakt"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 29,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "updatedFile",
    "memberof": "src/config/constants.js",
    "longname": "src/config/constants.js~updatedFile",
    "access": null,
    "export": true,
    "importPath": "popcorn-api/src/config/constants.js",
    "importStyle": "{updatedFile}",
    "description": "The name of the updated file holding the `updated` value for the index page. Default is `lastUpdated.json`.",
    "lineNumber": 209,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 30,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "webRequestTimeout",
    "memberof": "src/config/constants.js",
    "longname": "src/config/constants.js~webRequestTimeout",
    "access": null,
    "export": true,
    "importPath": "popcorn-api/src/config/constants.js",
    "importStyle": "{webRequestTimeout}",
    "description": "The maximum time a web request may take. Default is `2` seconds.",
    "lineNumber": 215,
    "type": {
      "nullable": null,
      "types": [
        "Integer"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 31,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "workers",
    "memberof": "src/config/constants.js",
    "longname": "src/config/constants.js~workers",
    "access": null,
    "export": true,
    "importPath": "popcorn-api/src/config/constants.js",
    "importStyle": "{workers}",
    "description": "The amount of workers on the cluster. Default is `2`.",
    "lineNumber": 221,
    "type": {
      "nullable": null,
      "types": [
        "Integer"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 32,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/config/logger.js",
    "memberof": null,
    "longname": "src/config/logger.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "// Import the neccesary modules.\r\nimport expressWinston from \"express-winston\";\r\nimport fs from \"fs\";\r\nimport path from \"path\";\r\nimport sprintf from \"sprintf\";\r\nimport winston from \"winston\";\r\n\r\nimport { tempDir } from \"./constants\";\r\nimport { name } from \"../../package.json\";\r\n\r\n/** Class for overriding the default console object. */\r\nexport default class Logger {\r\n\r\n  /** Create a logger object. */\r\n  constructor() {\r\n     // Create the temp directory if it does not exists.\r\n    if (!fs.existsSync(tempDir)) fs.mkdirSync(tempDir);\r\n\r\n    /**\r\n     * The Winston instance.\r\n     * @type {Object}\r\n     */\r\n    Logger.logger = new winston.Logger({\r\n      transports: [\r\n        new winston.transports.Console({\r\n          name,\r\n          formatter: Logger._consoleFormatter,\r\n          handleExceptions: true,\r\n          prettyPrint: true\r\n        }),\r\n        new winston.transports.File({\r\n          filename: path.join(tempDir, `${name}.log`),\r\n          level: \"warn\",\r\n          json: false,\r\n          formatter: Logger._fileFormatter,\r\n          maxsize: 5242880,\r\n          handleExceptions: true\r\n        })\r\n      ],\r\n      exitOnError: false\r\n    });\r\n\r\n    /**\r\n     * The Express Winston instance.\r\n     * @type {Object}\r\n     */\r\n    Logger.expressLogger = new expressWinston.logger({winstonInstance: Logger.logger, expressFormat: true});\r\n\r\n    // Override the console functions.\r\n    console.log = msg => Logger.logger.info(msg);\r\n    console.error = msg => Logger.logger.error(msg);\r\n    console.warn = msg => Logger.logger.warn(msg);\r\n    console.info = msg => Logger.logger.info(msg);\r\n    console.debug = msg => Logger.logger.debug(msg);\r\n  };\r\n\r\n  /**\r\n   * Check if the message is empty and replace it with the meta.\r\n   * @param {Object} args - Arguments passed by Winston.\r\n   * @returns {Object} - Formatter arguments passed by Winston.\r\n   */\r\n  static _checkEmptyMessage(args) {\r\n    if (args.message === \"\" && Object.keys(args.meta).length !== 0)\r\n      args.message = JSON.stringify(args.meta);\r\n\r\n    return args;\r\n  };\r\n\r\n  /**\r\n   * Get the color of the output based on the log level.\r\n   * @param {String} level - The log level.\r\n   * @returns {String} - A color based on the log level.\r\n   */\r\n  static _getLevelColor(level) {\r\n    switch (level) {\r\n    case \"error\":\r\n      return \"\\x1b[31m\";\r\n      break;\r\n    case \"warn\":\r\n      return \"\\x1b[33m\";\r\n      break;\r\n    case \"info\":\r\n      return \"\\x1b[36m\";\r\n      break;\r\n    case \"debug\":\r\n      return \"\\x1b[34m\";\r\n      break;\r\n    default:\r\n      return \"\\x1b[36m\";\r\n      break;\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Formatter function which formats the output to the console.\r\n   * @param {Object} args - Arguments passed by Winston.\r\n   * @returns {String} - The formatted message.\r\n   */\r\n  static _consoleFormatter(args) {\r\n    args = Logger._checkEmptyMessage(args);\r\n    const color = Logger._getLevelColor(args.level);\r\n\r\n    return sprintf(`\\x1b[0m[%s] ${color}%5s:\\x1b[0m %2s/%d: \\x1b[36m%s\\x1b[0m`,\r\n      new Date().toISOString(), args.level.toUpperCase(), name,\r\n      process.pid, args.message);\r\n  };\r\n\r\n  /**\r\n   * Formatter function which formate the output to the log file.\r\n   * @param {Object} args - Arguments passed by Winston.\r\n   * @returns {String} - The formatted message.\r\n   */\r\n  static _fileFormatter(args) {\r\n    args = Logger._checkEmptyMessage(args);\r\n    return JSON.stringify({\r\n      name,\r\n      pid: process.pid,\r\n      level: args.level,\r\n      msg: args.message,\r\n      time: new Date().toISOString()\r\n    });\r\n  };\r\n\r\n};\r\n"
  },
  {
    "__docId__": 33,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Logger",
    "memberof": "src/config/logger.js",
    "longname": "src/config/logger.js~Logger",
    "access": null,
    "export": true,
    "importPath": "popcorn-api/src/config/logger.js",
    "importStyle": "Logger",
    "description": "Class for overriding the default console object.",
    "lineNumber": 12,
    "interface": false
  },
  {
    "__docId__": 34,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/config/logger.js~Logger",
    "longname": "src/config/logger.js~Logger#constructor",
    "access": null,
    "description": "Create a logger object.",
    "lineNumber": 15,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 35,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "_checkEmptyMessage",
    "memberof": "src/config/logger.js~Logger",
    "longname": "src/config/logger.js~Logger._checkEmptyMessage",
    "access": null,
    "description": "Check if the message is empty and replace it with the meta.",
    "lineNumber": 62,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} - Formatter arguments passed by Winston."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "args",
        "description": "Arguments passed by Winston."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "Formatter arguments passed by Winston."
    },
    "generator": false
  },
  {
    "__docId__": 36,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "_getLevelColor",
    "memberof": "src/config/logger.js~Logger",
    "longname": "src/config/logger.js~Logger._getLevelColor",
    "access": null,
    "description": "Get the color of the output based on the log level.",
    "lineNumber": 74,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{String} - A color based on the log level."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "level",
        "description": "The log level."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "A color based on the log level."
    },
    "generator": false
  },
  {
    "__docId__": 37,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "_consoleFormatter",
    "memberof": "src/config/logger.js~Logger",
    "longname": "src/config/logger.js~Logger._consoleFormatter",
    "access": null,
    "description": "Formatter function which formats the output to the console.",
    "lineNumber": 99,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{String} - The formatted message."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "args",
        "description": "Arguments passed by Winston."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "The formatted message."
    },
    "generator": false
  },
  {
    "__docId__": 38,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "_fileFormatter",
    "memberof": "src/config/logger.js~Logger",
    "longname": "src/config/logger.js~Logger._fileFormatter",
    "access": null,
    "description": "Formatter function which formate the output to the log file.",
    "lineNumber": 113,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{String} - The formatted message."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "args",
        "description": "Arguments passed by Winston."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "The formatted message."
    },
    "generator": false
  },
  {
    "__docId__": 39,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/config/routes.js",
    "memberof": null,
    "longname": "src/config/routes.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "// Import the neccesary modules.\r\nimport Index from \"../controllers/index\";\r\nimport Animes from \"../controllers/animes\";\r\nimport Movies from \"../controllers/movies\";\r\nimport Shows from \"../controllers/shows\";\r\n\r\n/** Class for setting up the routes for the API. */\r\nexport default class Routes {\r\n\r\n  /**\r\n   * Create a routes object.\r\n   * @param {Express} app - The ExpresssJS instance.\r\n   */\r\n  constructor(app) {\r\n    /**\r\n     * The index controller.\r\n     * @type {Index}\r\n     */\r\n    Routes.index = new Index();\r\n\r\n    /**\r\n     * The animes controller.\r\n     * @type {Animes}\r\n     */\r\n    Routes._animes = new Animes();\r\n\r\n    /**\r\n     * The movies controller.\r\n     * @type {Movies}\r\n     */\r\n    Routes._movies = new Movies();\r\n\r\n    /**\r\n     * The shows controller.\r\n     * @type {Shows}\r\n     */\r\n    Routes._shows = new Shows();\r\n\r\n    Routes._setupRoutes(app);\r\n  };\r\n\r\n  /**\r\n   * Setup ExpressJS routing.\r\n   * @param {ExpressJS} app - The ExpresssJS application.\r\n   */\r\n  static _setupRoutes(app) {\r\n    app.get(\"/\", Routes.index.getIndex);\r\n    app.get(\"/logs/error\", Routes.index.getErrorLog);\r\n\r\n    app.get(\"/animes\", Routes._animes.getAnimes);\r\n    app.get(\"/animes/:page\", Routes._animes.getPage);\r\n    app.get(\"/anime/:id\", Routes._animes.getAnime);\r\n    app.get(\"/random/anime\", Routes._animes.getRandomAnime);\r\n\r\n    app.get(\"/movies\", Routes._movies.getMovies);\r\n    app.get(\"/movies/:page\", Routes._movies.getPage);\r\n    app.get(\"/movie/:id\", Routes._movies.getMovie);\r\n    app.get(\"/random/movie\", Routes._movies.getRandomMovie);\r\n\r\n    app.get(\"/shows\", Routes._shows.getShows);\r\n    app.get(\"/shows/:page\", Routes._shows.getPage);\r\n    app.get(\"/show/:id\", Routes._shows.getShow);\r\n    app.get(\"/random/show\", Routes._shows.getRandomShow);\r\n  };\r\n\r\n};\r\n"
  },
  {
    "__docId__": 40,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Routes",
    "memberof": "src/config/routes.js",
    "longname": "src/config/routes.js~Routes",
    "access": null,
    "export": true,
    "importPath": "popcorn-api/src/config/routes.js",
    "importStyle": "Routes",
    "description": "Class for setting up the routes for the API.",
    "lineNumber": 8,
    "interface": false
  },
  {
    "__docId__": 41,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/config/routes.js~Routes",
    "longname": "src/config/routes.js~Routes#constructor",
    "access": null,
    "description": "Create a routes object.",
    "lineNumber": 14,
    "params": [
      {
        "nullable": null,
        "types": [
          "Express"
        ],
        "spread": false,
        "optional": false,
        "name": "app",
        "description": "The ExpresssJS instance."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 42,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "_setupRoutes",
    "memberof": "src/config/routes.js~Routes",
    "longname": "src/config/routes.js~Routes._setupRoutes",
    "access": null,
    "description": "Setup ExpressJS routing.",
    "lineNumber": 46,
    "params": [
      {
        "nullable": null,
        "types": [
          "ExpressJS"
        ],
        "spread": false,
        "optional": false,
        "name": "app",
        "description": "The ExpresssJS application."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 43,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/config/setup.js",
    "memberof": null,
    "longname": "src/config/setup.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "// Import the neccesary modules.\r\nimport bodyParser from \"body-parser\";\r\nimport compress from \"compression\";\r\nimport mongoose from \"mongoose\";\r\nimport responseTime from \"response-time\";\r\n\r\nimport { dbHosts, Promise } from \"./constants\";\r\nimport Logger from \"./logger\";\r\n\r\n/** Class for setting up the API. */\r\nexport default class Setup {\r\n\r\n  /**\r\n   * Setup the Express service.\r\n   * @param {Express} app - The ExpresssJS instance.\r\n   * @param {Boolean} pretty - Pretty output with Winston logging.\r\n   */\r\n  constructor(app, pretty) {\r\n    // Used to extract data from query strings.\r\n    RegExp.escape = text => text.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, \"\\\\$&\");\r\n\r\n    // Connection and configuration of the MongoDB database.\r\n    Setup.connectMongoDB();\r\n\r\n    // Enable parsing URL encoded bodies.\r\n    app.use(bodyParser.urlencoded({extended: true}));\r\n\r\n    // Enable parsing JSON bodies.\r\n    app.use(bodyParser.json());\r\n\r\n    // Enables compression of response bodies.\r\n    app.use(compress({threshold: 1400, level: 4, memLevel: 3}));\r\n\r\n    // Enable response time tracking for HTTP request.\r\n    app.use(responseTime());\r\n\r\n    // Enable HTTP request logging.\r\n    // app.use(Logger.expressLogger);\r\n    if (pretty) app.use(Logger.expressLogger);\r\n  }\r\n\r\n  /** Connection and configuration of the MongoDB database. */\r\n  static connectMongoDB() {\r\n    mongoose.Promise = Promise;\r\n    mongoose.connect(`mongodb://${dbHosts.join(\",\")}/popcorn`, {\r\n      db: {\r\n        native_parser: true\r\n      },\r\n      replset: {\r\n        rs_name: \"pt0\",\r\n        connectWithNoPrimary: true,\r\n        readPreference: \"nearest\",\r\n        strategy: \"ping\",\r\n        socketOptions: {\r\n          keepAlive: 1\r\n        }\r\n      },\r\n      server: {\r\n        readPreference: \"nearest\",\r\n        strategy: \"ping\",\r\n        socketOptions: {\r\n          keepAlive: 1\r\n        }\r\n      }\r\n    });\r\n  };\r\n\r\n};\r\n"
  },
  {
    "__docId__": 44,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Setup",
    "memberof": "src/config/setup.js",
    "longname": "src/config/setup.js~Setup",
    "access": null,
    "export": true,
    "importPath": "popcorn-api/src/config/setup.js",
    "importStyle": "Setup",
    "description": "Class for setting up the API.",
    "lineNumber": 11,
    "interface": false
  },
  {
    "__docId__": 45,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/config/setup.js~Setup",
    "longname": "src/config/setup.js~Setup#constructor",
    "access": null,
    "description": "Setup the Express service.",
    "lineNumber": 18,
    "params": [
      {
        "nullable": null,
        "types": [
          "Express"
        ],
        "spread": false,
        "optional": false,
        "name": "app",
        "description": "The ExpresssJS instance."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "pretty",
        "description": "Pretty output with Winston logging."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 46,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "connectMongoDB",
    "memberof": "src/config/setup.js~Setup",
    "longname": "src/config/setup.js~Setup.connectMongoDB",
    "access": null,
    "description": "Connection and configuration of the MongoDB database.",
    "lineNumber": 43,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 47,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/controllers/animes.js",
    "memberof": null,
    "longname": "src/controllers/animes.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "// Import the neccesary modules.\nimport Anime from \"../models/Anime\";\nimport { pageSize } from \"../config/constants\";\n\n/** Class for getting anime data from the MongoDB. */\nexport default class Animes {\n\n  /** Create an animes object. */\n  constructor() {\n    /**\n     * Object used for the projection of anime shows.\n     * @type {Object}\n     */\n    Animes._projection = {\n      images: 1,\n      mal_id: 1,\n      haru_id: 1,\n      tvdb_id: 1,\n      imdb_id: 1,\n      slug: 1,\n      title: 1,\n      year: 1,\n      type: 1,\n      item_data: 1,\n      rating: 1,\n      genres: 1\n    };\n  };\n\n  /**\n   * Get all the pages.\n   * @param {Request} req - The express request object.\n   * @param {Response} res - The express response object.\n   * @param {Function} next - The next function for Express.\n   * @returns {Array} - A list of pages which are available.\n   */\n  getAnimes(req, res, next) {\n    return Anime.count({\n      num_episodes: {\n        $gt: 0\n      }\n    }).exec().then(count => {\n      const pages = Math.round(count / pageSize);\n      const docs = [];\n\n      for (let i = 1; i < pages + 1; i++) docs.push(`animes/${i}`);\n\n      return res.json(docs);\n    }).catch(err => next(err));\n  };\n\n  /**\n   * Get one page.\n   * @param {Request} req - The express request object.\n   * @param {Response} res - The express response object.\n   * @param {Function} next - The next function for Express.\n   * @returns {Array} - The contents of one page.\n   */\n  getPage(req, res, next) {\n    const page = req.params.page - 1;\n    const offset = page * pageSize;\n\n    if (req.params.page.match(/all/i)) {\n      return Anime.aggregate([{\n          $match: {\n            num_episodes: {\n              $gt: 0\n            }\n          }\n        }, {\n          $project: Animes._projection\n        }, {\n          $sort: {\n            title: -1\n          }\n        }]).exec()\n        .then(docs => res.json(docs))\n        .catch(err => next(err));\n    } else {\n      const query = {num_episodes: {$gt: 0}};\n      const data = req.query;\n\n      if (!data.order) data.order = -1;\n\n      let sort = {\n        \"rating.votes\": parseInt(data.order, 10),\n        \"rating.percentage\": parseInt(data.order, 10),\n        \"rating.watching\": parseInt(data.order, 10)\n      };\n\n      if (data.keywords) {\n        const words = data.keywords.split(\" \");\n        let regex = \"^\";\n        for (let w in words) regex += `(?=.*\\\\b${RegExp.escape(words[w].toLowerCase())}\\\\b)`;\n        query.title = {$regex: new RegExp(`${regex}.*`),$options: \"gi\"};\n      }\n\n      if (data.sort) {\n        if (data.sort.match(/name/i)) sort = {\n          \"title\": (parseInt(data.order, 10) * -1)\n        };\n        if (data.sort.match(/rating/i)) sort = {\n          \"rating.percentage\": parseInt(data.order, 10),\n          \"rating.votes\": parseInt(data.order, 10)\n        };\n        // if (data.sort === \"trending\") sort = {\n        //   \"rating.watching\": parseInt(data.order, 10)\n        // };\n        // if (data.sort === \"updated\") sort = {\n        //   \"latest_episode\": parseInt(data.order, 10)\n        // };\n        if (data.sort.match(/year/i)) sort = {\n          \"year\": parseInt(data.order, 10)\n        };\n      }\n\n      if (data.genre && !data.genre.match(/all/i)) query.genres = data.genre;\n\n      return Anime.aggregate([{\n          $sort: sort\n        }, {\n          $match: query\n        }, {\n          $project: Animes._projection\n        }, {\n          $skip: offset\n        }, {\n          $limit: pageSize\n        }]).exec()\n        .then(docs => res.json(docs))\n        .catch(err => next(err));\n    }\n  };\n\n  /**\n   * Get info from one anime.\n   * @param {Request} req - The express request object.\n   * @param {Response} res - The express response object.\n   * @param {Function} next - The next function for Express.\n   * @returns {Anime} - The details of a single anime.\n   */\n  getAnime(req, res, next) {\n    return Anime.findOne({_id: req.params.id}, {latest_episode: 0}).exec()\n      .then(docs => res.json(docs))\n      .catch(err => next(err));\n  };\n\n  /**\n   * Get a random anime.\n   * @param {Request} req - The express request object.\n   * @param {Response} res - The express response object.\n   * @param {Function} next - The next function for Express.\n   * @returns {Anime} - A random movie.\n   */\n  getRandomAnime(req, res, next) {\n    return Anime.aggregate([{\n        $project: Animes._projection\n      }, {\n        $sample: {\n          size: 1\n        }\n      }, {\n        $limit: 1\n      }]).exec()\n      .then(docs => res.json(docs[0]))\n      .catch(err => next(err));\n  };\n\n};\n"
  },
  {
    "__docId__": 48,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Animes",
    "memberof": "src/controllers/animes.js",
    "longname": "src/controllers/animes.js~Animes",
    "access": null,
    "export": true,
    "importPath": "popcorn-api/src/controllers/animes.js",
    "importStyle": "Animes",
    "description": "Class for getting anime data from the MongoDB.",
    "lineNumber": 6,
    "interface": false
  },
  {
    "__docId__": 49,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/controllers/animes.js~Animes",
    "longname": "src/controllers/animes.js~Animes#constructor",
    "access": null,
    "description": "Create an animes object.",
    "lineNumber": 9,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 50,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getAnimes",
    "memberof": "src/controllers/animes.js~Animes",
    "longname": "src/controllers/animes.js~Animes#getAnimes",
    "access": null,
    "description": "Get all the pages.",
    "lineNumber": 37,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array} - A list of pages which are available."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Request"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "The express request object."
      },
      {
        "nullable": null,
        "types": [
          "Response"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "The express response object."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "next",
        "description": "The next function for Express."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "A list of pages which are available."
    },
    "generator": false
  },
  {
    "__docId__": 51,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getPage",
    "memberof": "src/controllers/animes.js~Animes",
    "longname": "src/controllers/animes.js~Animes#getPage",
    "access": null,
    "description": "Get one page.",
    "lineNumber": 59,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array} - The contents of one page."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Request"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "The express request object."
      },
      {
        "nullable": null,
        "types": [
          "Response"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "The express response object."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "next",
        "description": "The next function for Express."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "The contents of one page."
    },
    "generator": false
  },
  {
    "__docId__": 52,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getAnime",
    "memberof": "src/controllers/animes.js~Animes",
    "longname": "src/controllers/animes.js~Animes#getAnime",
    "access": null,
    "description": "Get info from one anime.",
    "lineNumber": 142,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Anime} - The details of a single anime."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Request"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "The express request object."
      },
      {
        "nullable": null,
        "types": [
          "Response"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "The express response object."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "next",
        "description": "The next function for Express."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Anime"
      ],
      "spread": false,
      "description": "The details of a single anime."
    },
    "generator": false
  },
  {
    "__docId__": 53,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getRandomAnime",
    "memberof": "src/controllers/animes.js~Animes",
    "longname": "src/controllers/animes.js~Animes#getRandomAnime",
    "access": null,
    "description": "Get a random anime.",
    "lineNumber": 155,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Anime} - A random movie."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Request"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "The express request object."
      },
      {
        "nullable": null,
        "types": [
          "Response"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "The express response object."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "next",
        "description": "The next function for Express."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Anime"
      ],
      "spread": false,
      "description": "A random movie."
    },
    "generator": false
  },
  {
    "__docId__": 54,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/controllers/index.js",
    "memberof": null,
    "longname": "src/controllers/index.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "// Import the neccesary modules.\r\nimport fs from \"fs\";\r\nimport path from \"path\";\r\n\r\nimport Anime from \"../models/Anime\";\r\nimport Movie from \"../models/Movie\";\r\nimport Show from \"../models/Show\";\r\nimport Util from \"../util\";\r\n\r\nimport { server, statusFile, tempDir, updatedFile } from \"../config/constants\";\r\nimport { name, repository, version } from \"../../package.json\";\r\n\r\n/** class for displaying information about the server the API is running on. */\r\nexport default class Index {\r\n\r\n  /** Create an index object. */\r\n  constructor() {\r\n    /**\r\n     * The util object with general functions.\r\n     * @type {Util}\r\n     */\r\n    Index._util = new Util();\r\n  };\r\n\r\n  /**\r\n   * Displays a given file.\r\n   * @param {Request} req - The express request object.\r\n   * @param {Response} res - The express response object.\r\n   * @param {String} path - The path to the file.\r\n   * @param {String} file - The name of the file.\r\n   * @returns {Object} - A file to display in the browser.\r\n   */\r\n  static _displayFile(req, res, root, file) {\r\n    if (fs.existsSync(path.join(root, file))) {\r\n      return res.sendFile(file, {\r\n        root,\r\n        headers: {\r\n          \"Content-Type\": \"text/plain; charset=UTF-8\"\r\n        }\r\n      });\r\n    } else {\r\n      return res.json({error: `Could not find file: '${root}'`});\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Get general information about the server.\r\n   * @param {Request} req - The express request object.\r\n   * @param {Response} res - The express response object.\r\n   * @param {Function} next - The next function for Express.\r\n   * @returns {Object} - General information about the server.\r\n   */\r\n  async getIndex(req, res, next) {\r\n    try {\r\n      const { updated } = JSON.parse(fs.readFileSync(path.join(tempDir, updatedFile), \"utf8\")),\r\n        { status } = JSON.parse(fs.readFileSync(path.join(tempDir, statusFile), \"utf8\")),\r\n        commit = await Index._util.executeCommand(\"git rev-parse --short HEAD\"),\r\n        totalAnimes = await Anime.count({num_episodes: {$gt: 0}}).exec(),\r\n        totalMovies = await Movie.count().exec(),\r\n        totalShows = await Show.count({num_seasons: {$gt: 0}}).exec();\r\n\r\n      return res.json({\r\n        repo: repository.url, server, status,\r\n        totalAnimes, totalMovies, totalShows,\r\n        updated, uptime: process.uptime() | 0,\r\n        version, commit\r\n      });\r\n    } catch (err) {\r\n      return next(err);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Displays the 'popcorn-api.log' file.\r\n   * @param {Request} req - The express request object.\r\n   * @param {Response} res - The express response object.\r\n   * @returns {File} - The content of the log file.\r\n   */\r\n  getErrorLog(req, res) {\r\n    return Index._displayFile(req, res, tempDir, `${name}.log`);\r\n  };\r\n\r\n};\r\n"
  },
  {
    "__docId__": 55,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Index",
    "memberof": "src/controllers/index.js",
    "longname": "src/controllers/index.js~Index",
    "access": null,
    "export": true,
    "importPath": "popcorn-api/src/controllers/index.js",
    "importStyle": "Index",
    "description": "class for displaying information about the server the API is running on.",
    "lineNumber": 14,
    "interface": false
  },
  {
    "__docId__": 56,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/controllers/index.js~Index",
    "longname": "src/controllers/index.js~Index#constructor",
    "access": null,
    "description": "Create an index object.",
    "lineNumber": 17,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 57,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "_displayFile",
    "memberof": "src/controllers/index.js~Index",
    "longname": "src/controllers/index.js~Index._displayFile",
    "access": null,
    "description": "Displays a given file.",
    "lineNumber": 33,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} - A file to display in the browser."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Request"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "The express request object."
      },
      {
        "nullable": null,
        "types": [
          "Response"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "The express response object."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": "The path to the file."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "file",
        "description": "The name of the file."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "A file to display in the browser."
    },
    "generator": false
  },
  {
    "__docId__": 58,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getIndex",
    "memberof": "src/controllers/index.js~Index",
    "longname": "src/controllers/index.js~Index#getIndex",
    "access": null,
    "description": "Get general information about the server.",
    "lineNumber": 53,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} - General information about the server."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Request"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "The express request object."
      },
      {
        "nullable": null,
        "types": [
          "Response"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "The express response object."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "next",
        "description": "The next function for Express."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "General information about the server."
    },
    "generator": false
  },
  {
    "__docId__": 59,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getErrorLog",
    "memberof": "src/controllers/index.js~Index",
    "longname": "src/controllers/index.js~Index#getErrorLog",
    "access": null,
    "description": "Displays the 'popcorn-api.log' file.",
    "lineNumber": 79,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{File} - The content of the log file."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Request"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "The express request object."
      },
      {
        "nullable": null,
        "types": [
          "Response"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "The express response object."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "File"
      ],
      "spread": false,
      "description": "The content of the log file."
    },
    "generator": false
  },
  {
    "__docId__": 60,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/controllers/movies.js",
    "memberof": null,
    "longname": "src/controllers/movies.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "// Import the neccesary modules.\r\nimport Movie from \"../models/Movie\";\r\nimport { pageSize } from \"../config/constants\";\r\n\r\n/** Class for getting movie data from the MongoDB. */\r\nexport default class Movies {\r\n\r\n  /** Create a movies object. */\r\n  constructor() {\r\n    /**\r\n     * Object used for the projection of movies.\r\n     * @type {Object}\r\n     */\r\n    Movies._projection = {\r\n      _id: 1,\r\n      imdb_id: 1,\r\n      title: 1,\r\n      year: 1,\r\n      runtime: 1,\r\n      images: 1,\r\n      genres: 1,\r\n      synopsis: 1,\r\n      trailer: 1,\r\n      certification: 1,\r\n      released: 1,\r\n      rating: 1,\r\n      torrents: 1\r\n    };\r\n  };\r\n\r\n  /**\r\n   * Get all the pages.\r\n   * @param {Request} req - The express request object.\r\n   * @param {Response} res - The express response object.\r\n   * @param {Function} next - The next function for Express.\r\n   * @returns {Array} - A list of pages which are available.\r\n   */\r\n  getMovies(req, res, next) {\r\n    return Movie.count().exec().then(count => {\r\n      const pages = Math.round(count / pageSize);\r\n      const docs = [];\r\n\r\n      for (let i = 1; i < pages + 1; i++) docs.push(`movies/${i}`);\r\n\r\n      return res.json(docs);\r\n    }).catch(err => next(err));\r\n  };\r\n\r\n  /**\r\n   * Get one page.\r\n   * @param {Request} req - The express request object.\r\n   * @param {Response} res - The express response object.\r\n   * @param {Function} next - The next function for Express.\r\n   * @returns {Array} - The contents of one page.\r\n   */\r\n  getPage(req, res, next) {\r\n    const page = req.params.page - 1;\r\n    const offset = page * pageSize;\r\n\r\n    if (req.params.page.match(/all/i)) {\r\n      return Movie.aggregate([{\r\n          $project: Movies._projection\r\n        }, {\r\n          $sort: {\r\n            title: -1\r\n          }\r\n        }]).exec()\r\n        .then(docs => res.json(docs))\r\n        .catch(err => next(err));\r\n    } else {\r\n      const query = {};\r\n      const data = req.query;\r\n\r\n      if (!data.order) data.order = -1;\r\n\r\n      let sort = {\r\n        \"rating.votes\": parseInt(data.order, 10),\r\n        \"rating.percentage\": parseInt(data.order, 10),\r\n        \"rating.watching\": parseInt(data.order, 10)\r\n      };\r\n\r\n      if (data.keywords) {\r\n        const words = data.keywords.split(\" \");\r\n        let regex = \"^\";\r\n        for (let w in words) regex += `(?=.*\\\\b${RegExp.escape(words[w].toLowerCase())}\\\\b)`;\r\n        query.title = {$regex: new RegExp(`${regex}.*`), $options: \"gi\"};\r\n      }\r\n\r\n      if (data.sort) {\r\n        if (data.sort.match(/last added/i)) sort = {\r\n          \"released\": parseInt(data.order, 10)\r\n        };\r\n        if (data.sort.match(/rating/i)) sort = {\r\n          \"rating.percentage\": parseInt(data.order, 10),\r\n          \"rating.votes\": parseInt(data.order, 10)\r\n        };\r\n        if (data.sort.match(/title/i)) sort = {\r\n          \"title\": (parseInt(data.order, 10) * 1)\r\n        };\r\n        if (data.sort.match(/trending/i)) sort = {\r\n          \"rating.watching\": parseInt(data.order, 10)\r\n        };\r\n        if (data.sort.match(/year/i)) sort = {\r\n          \"year\": parseInt(data.order, 10)\r\n        };\r\n      }\r\n\r\n      if (data.genre && !data.genre.match(/all/i)) {\r\n        if (data.genre.match(/science[-\\s]fiction/i) || data.genre.match(/sci[-\\s]fi/i)) data.genre = \"science-fiction\";\r\n        query.genres = data.genre.toLowerCase();\r\n      }\r\n\r\n      return Movie.aggregate([{\r\n          $sort: sort\r\n        }, {\r\n          $match: query\r\n        }, {\r\n          $project: Movies._projection\r\n        }, {\r\n          $skip: offset\r\n        }, {\r\n          $limit: pageSize\r\n        }]).exec()\r\n        .then(docs => res.json(docs))\r\n        .catch(err => next(err));\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Get info from one movie.\r\n   * @param {Request} req - The express request object.\r\n   * @param {Response} res - The express response object.\r\n   * @param {Function} next - The next function for Express.\r\n   * @returns {Movie} - The details of a single movie.\r\n   */\r\n  getMovie(req, res, next) {\r\n    return Movie.aggregate([{\r\n        $match: {\r\n          _id: req.params.id\r\n        }\r\n      }, {\r\n        $project: Movies._projection\r\n      }, {\r\n        $limit: 1\r\n      }]).exec()\r\n      .then(docs => res.json(docs[0]))\r\n      .catch(err => next(err));\r\n  };\r\n\r\n  /**\r\n   * Get a random movie.\r\n   * @param {Request} req - The express request object.\r\n   * @param {Response} res - The express response object.\r\n   * @param {Function} next - The next function for Express.\r\n   * @returns {Movie} - A random movie.\r\n   */\r\n  getRandomMovie(req, res, next) {\r\n    return Movie.aggregate([{\r\n        $project: Movies._projection\r\n      }, {\r\n        $sample: {\r\n          size: 1\r\n        }\r\n      }, {\r\n        $limit: 1\r\n      }]).exec()\r\n      .then(docs => res.json(docs[0]))\r\n      .catch(err => next(err));\r\n  };\r\n\r\n};\r\n"
  },
  {
    "__docId__": 61,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Movies",
    "memberof": "src/controllers/movies.js",
    "longname": "src/controllers/movies.js~Movies",
    "access": null,
    "export": true,
    "importPath": "popcorn-api/src/controllers/movies.js",
    "importStyle": "Movies",
    "description": "Class for getting movie data from the MongoDB.",
    "lineNumber": 6,
    "interface": false
  },
  {
    "__docId__": 62,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/controllers/movies.js~Movies",
    "longname": "src/controllers/movies.js~Movies#constructor",
    "access": null,
    "description": "Create a movies object.",
    "lineNumber": 9,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 63,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getMovies",
    "memberof": "src/controllers/movies.js~Movies",
    "longname": "src/controllers/movies.js~Movies#getMovies",
    "access": null,
    "description": "Get all the pages.",
    "lineNumber": 38,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array} - A list of pages which are available."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Request"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "The express request object."
      },
      {
        "nullable": null,
        "types": [
          "Response"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "The express response object."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "next",
        "description": "The next function for Express."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "A list of pages which are available."
    },
    "generator": false
  },
  {
    "__docId__": 64,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getPage",
    "memberof": "src/controllers/movies.js~Movies",
    "longname": "src/controllers/movies.js~Movies#getPage",
    "access": null,
    "description": "Get one page.",
    "lineNumber": 56,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array} - The contents of one page."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Request"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "The express request object."
      },
      {
        "nullable": null,
        "types": [
          "Response"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "The express response object."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "next",
        "description": "The next function for Express."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "The contents of one page."
    },
    "generator": false
  },
  {
    "__docId__": 65,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getMovie",
    "memberof": "src/controllers/movies.js~Movies",
    "longname": "src/controllers/movies.js~Movies#getMovie",
    "access": null,
    "description": "Get info from one movie.",
    "lineNumber": 136,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Movie} - The details of a single movie."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Request"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "The express request object."
      },
      {
        "nullable": null,
        "types": [
          "Response"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "The express response object."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "next",
        "description": "The next function for Express."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Movie"
      ],
      "spread": false,
      "description": "The details of a single movie."
    },
    "generator": false
  },
  {
    "__docId__": 66,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getRandomMovie",
    "memberof": "src/controllers/movies.js~Movies",
    "longname": "src/controllers/movies.js~Movies#getRandomMovie",
    "access": null,
    "description": "Get a random movie.",
    "lineNumber": 157,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Movie} - A random movie."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Request"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "The express request object."
      },
      {
        "nullable": null,
        "types": [
          "Response"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "The express response object."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "next",
        "description": "The next function for Express."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Movie"
      ],
      "spread": false,
      "description": "A random movie."
    },
    "generator": false
  },
  {
    "__docId__": 67,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/controllers/shows.js",
    "memberof": null,
    "longname": "src/controllers/shows.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "// Import the neccesary modules.\r\nimport Show from \"../models/Show\";\r\nimport { pageSize } from \"../config/constants\";\r\n\r\n/** class for getting show data from the MongoDB. */\r\nexport default class Shows {\r\n\r\n  /**\r\n   * Create a shows object.\r\n   */\r\n  constructor() {\r\n    /**\r\n     * Object used for the projections of shows.\r\n     * @type {Object}\r\n     */\r\n    Shows._projections = {\r\n      _id: 1,\r\n      imdb_id: 1,\r\n      tvdb_id: 1,\r\n      title: 1,\r\n      year: 1,\r\n      images: 1,\r\n      slug: 1,\r\n      num_seasons: 1,\r\n      rating: 1\r\n    };\r\n  };\r\n\r\n  /**\r\n   * Get all the pages.\r\n   * @param {Request} req - The express request object.\r\n   * @param {Response} res - The express response object.\r\n   * @param {Function} next - The next function for Express.\r\n   * @returns {Array} - A list of pages which are available.\r\n   */\r\n  getShows(req, res, next) {\r\n    return Show.count({\r\n      num_seasons: {\r\n        $gt: 0\r\n      }\r\n    }).exec().then(count => {\r\n      const pages = Math.round(count / pageSize);\r\n      const docs = [];\r\n\r\n      for (let i = 1; i < pages + 1; i++) docs.push(`shows/${i}`);\r\n\r\n      return res.json(docs);\r\n    }).catch(err => next(err));\r\n  };\r\n\r\n  /**\r\n   * Get one page.\r\n   * @param {Request} req - The express request object.\r\n   * @param {Response} res - The express response object.\r\n   * @param {Function} next - The next function for Express.\r\n   * @returns {Array} - The contents of one page.\r\n   */\r\n  getPage(req, res, next) {\r\n    const page = req.params.page - 1;\r\n    const offset = page * pageSize;\r\n\r\n    if (req.params.page.match(/all/i)) {\r\n      return Show.aggregate([{\r\n          $match: {\r\n            num_seasons: {\r\n              $gt: 0\r\n            }\r\n          }\r\n        }, {\r\n          $project: Shows._projections\r\n        }, {\r\n          $sort: {\r\n            title: -1\r\n          }\r\n        }]).exec()\r\n        .then(docs => res.json(docs))\r\n        .catch(err => next(err));\r\n    } else {\r\n      const query = {num_seasons: {$gt: 0}};\r\n      const data = req.query;\r\n\r\n      if (!data.order) data.order = -1;\r\n\r\n      let sort = {\r\n        \"rating.votes\": parseInt(data.order, 10),\r\n        \"rating.percentage\": parseInt(data.order, 10),\r\n        \"rating.watching\": parseInt(data.order, 10)\r\n      };\r\n\r\n      if (data.keywords) {\r\n        const words = data.keywords.split(\" \");\r\n        let regex = \"^\";\r\n        for (let w in words) regex += `(?=.*\\\\b${RegExp.escape(words[w].toLowerCase())}\\\\b)`;\r\n        query.title = { $regex: new RegExp(`${regex}.*`), $options: \"gi\" };\r\n      }\r\n\r\n      if (data.sort) {\r\n        if (data.sort.match(/name/i)) sort = {\r\n          \"title\": (parseInt(data.order, 10) * -1)\r\n        };\r\n        if (data.sort.match(/rating/i)) sort = {\r\n          \"rating.percentage\": parseInt(data.order, 10),\r\n          \"rating.votes\": parseInt(data.order, 10)\r\n        };\r\n        if (data.sort.match(/trending/i)) sort = {\r\n          \"rating.watching\": parseInt(data.order, 10)\r\n        };\r\n        if (data.sort.match(/updated/i)) sort = {\r\n          \"latest_episode\": parseInt(data.order, 10)\r\n        };\r\n        if (data.sort.match(/year/i)) sort = {\r\n          \"year\": parseInt(data.order, 10)\r\n        };\r\n      }\r\n\r\n      if (data.genre && !data.genre.match(/all/i)) {\r\n        if (data.genre.match(/science[-\\s]fiction/i) || data.genre.match(/sci[-\\s]fi/i)) data.genre = \"science-fiction\";\r\n        query.genres = data.genre.toLowerCase();\r\n      }\r\n\r\n      return Show.aggregate([{\r\n          $sort: sort\r\n        }, {\r\n          $match: query\r\n        }, {\r\n          $project: Shows._projections\r\n        }, {\r\n          $skip: offset\r\n        }, {\r\n          $limit: pageSize\r\n        }]).exec()\r\n        .then(docs => res.json(docs))\r\n        .catch(err => res.jfson(err));\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Get info from one show.\r\n   * @param {Request} req - The express request object.\r\n   * @param {Response} res - The express response object.\r\n   * @param {Function} next - The next function for Express.\r\n   * @returns {Show} - The details of a single show.\r\n   */\r\n  getShow(req, res, next) {\r\n    return Show.findOne({\r\n      _id: req.params.id\r\n    }, {latest_episode: 0}).exec()\r\n    .then(docs => res.json(docs))\r\n    .catch(err => next(err));\r\n  };\r\n\r\n  /**\r\n   * Get a random show.\r\n   * @param {Request} req - The express request object.\r\n   * @param {Response} res - The express response object.\r\n   * @param {Function} next - The next function for Express.\r\n   * @returns {Show} - A random show.\r\n   */\r\n  getRandomShow(req, res, next) {\r\n    return Show.aggregate([{\r\n        $project: Shows._projections\r\n      }, {\r\n        $sample: {\r\n          size: 1\r\n        }\r\n      }, {\r\n        $limit: 1\r\n      }]).exec()\r\n      .then(docs => res.json(docs[0]))\r\n      .catch(err => next(err));\r\n  };\r\n\r\n};\r\n"
  },
  {
    "__docId__": 68,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Shows",
    "memberof": "src/controllers/shows.js",
    "longname": "src/controllers/shows.js~Shows",
    "access": null,
    "export": true,
    "importPath": "popcorn-api/src/controllers/shows.js",
    "importStyle": "Shows",
    "description": "class for getting show data from the MongoDB.",
    "lineNumber": 6,
    "interface": false
  },
  {
    "__docId__": 69,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/controllers/shows.js~Shows",
    "longname": "src/controllers/shows.js~Shows#constructor",
    "access": null,
    "description": "Create a shows object.",
    "lineNumber": 11,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 70,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getShows",
    "memberof": "src/controllers/shows.js~Shows",
    "longname": "src/controllers/shows.js~Shows#getShows",
    "access": null,
    "description": "Get all the pages.",
    "lineNumber": 36,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array} - A list of pages which are available."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Request"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "The express request object."
      },
      {
        "nullable": null,
        "types": [
          "Response"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "The express response object."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "next",
        "description": "The next function for Express."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "A list of pages which are available."
    },
    "generator": false
  },
  {
    "__docId__": 71,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getPage",
    "memberof": "src/controllers/shows.js~Shows",
    "longname": "src/controllers/shows.js~Shows#getPage",
    "access": null,
    "description": "Get one page.",
    "lineNumber": 58,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array} - The contents of one page."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Request"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "The express request object."
      },
      {
        "nullable": null,
        "types": [
          "Response"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "The express response object."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "next",
        "description": "The next function for Express."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "The contents of one page."
    },
    "generator": false
  },
  {
    "__docId__": 72,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getShow",
    "memberof": "src/controllers/shows.js~Shows",
    "longname": "src/controllers/shows.js~Shows#getShow",
    "access": null,
    "description": "Get info from one show.",
    "lineNumber": 144,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Show} - The details of a single show."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Request"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "The express request object."
      },
      {
        "nullable": null,
        "types": [
          "Response"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "The express response object."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "next",
        "description": "The next function for Express."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Show"
      ],
      "spread": false,
      "description": "The details of a single show."
    },
    "generator": false
  },
  {
    "__docId__": 73,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getRandomShow",
    "memberof": "src/controllers/shows.js~Shows",
    "longname": "src/controllers/shows.js~Shows#getRandomShow",
    "access": null,
    "description": "Get a random show.",
    "lineNumber": 159,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Show} - A random show."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Request"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "The express request object."
      },
      {
        "nullable": null,
        "types": [
          "Response"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "The express response object."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "next",
        "description": "The next function for Express."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Show"
      ],
      "spread": false,
      "description": "A random show."
    },
    "generator": false
  },
  {
    "__docId__": 74,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/index.js",
    "memberof": null,
    "longname": "src/index.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "// Import the neccesary modules.\r\nimport cluster from \"cluster\";\r\nimport cron from \"cron\";\r\nimport domain from \"domain\";\r\nimport Express from \"express\";\r\nimport os from \"os\";\r\n\r\nimport Logger from \"./config/logger\";\r\nimport Routes from \"./config/routes\";\r\nimport Scraper from \"./scraper\";\r\nimport Setup from \"./config/setup\";\r\nimport Util from \"./util\";\r\nimport { cronTime, master, port, timeZone, workers } from \"./config/constants\";\r\n\r\n/**\r\n * Class for starting the API.\r\n *\r\n * @example <caption></caption>\r\n * // Simply start the API by creating a new instance of the Index class.\r\n * const index = new Index();\r\n *\r\n * @example\r\n * // Or override the default configuration of the Index class.\r\n * const index = new Index({start: true, pretty: true, debug: false});\r\n */\r\nexport default class Index {\r\n\r\n  /**\r\n   * Create an index object.\r\n   * @param {Object} config - Configuration for the API.\r\n   * @param {Boolean} [config.start=true] - Start the scraping process.\r\n   * @param {Boolean} [config.pretty=true] - Pretty output with Winston logging.\r\n   * @param {Boolean} [config.debug=false] - Debug mode for extra output.\r\n   */\r\n  constructor({start = true, pretty = true, debug = false} = {}) {\r\n    /**\r\n     * The express object.\r\n     * @type {Express}\r\n     */\r\n    Index._app = new Express();\r\n\r\n    /**\r\n     * The util object with general functions.\r\n     * @type {Util}\r\n     */\r\n    Index._util = new Util();\r\n\r\n    /**\r\n     * The scraper object to scrape for torrents.\r\n     * @type {Scraper}\r\n     */\r\n    Index._scraper = new Scraper(debug);\r\n\r\n    // Create a new logger class & override the console object with Winston.\r\n    if (pretty) {\r\n      /**\r\n       * The logger object to configure the logging.\r\n       * @type {Logger}\r\n       */\r\n      Index._logger = new Logger();\r\n    }\r\n\r\n    // Setup the MongoDB configuration and ExpressJS configuration.\r\n    const _setup = new Setup(Index._app, pretty);\r\n\r\n    // Setup the API routes.\r\n    const _routes = new Routes(Index._app);\r\n\r\n    // Start the API.\r\n    Index._startAPI(start);\r\n  };\r\n\r\n  /**\r\n   * Function to start the API.\r\n   * @param {Boolean} [start=true] - Start the scraping.\r\n   */\r\n  static _startAPI(start) {\r\n\r\n    if (cluster.isMaster) { // Check is the cluster is the master\r\n      // Clear the log files from the temp directory.\r\n      Index._util.resetLog();\r\n\r\n      // Setup the temporary directory\r\n      Index._util.createTemp();\r\n\r\n      // Fork workers.\r\n      for (let i = 0; i < Math.min(os.cpus().length, workers); i++) cluster.fork();\r\n\r\n      // Check for errors with the workers.\r\n      cluster.on(\"exit\", worker => {\r\n        Index._util.onError(`Worker '${worker.process.pid}' died, spinning up another!`);\r\n        cluster.fork();\r\n      });\r\n\r\n      // Start the cronjob.\r\n      if (master) {\r\n        // WARNING: Domain module is pending deprication: https://nodejs.org/api/domain.html\r\n        const scope = domain.create();\r\n        scope.run(() => {\r\n          console.log(\"API started\");\r\n          try {\r\n            new cron.CronJob({\r\n              cronTime, timeZone,\r\n              onTick: () => Index._scraper.scrape(),\r\n              onComplete: () => Index._util.setStatus()\r\n            });\r\n\r\n            Index._util.setLastUpdated(\"Never\");\r\n            Index._util.setStatus();\r\n\r\n            if (start) Index._scraper.scrape();\r\n          } catch (err) {\r\n            return Index._util.onError(err);\r\n          }\r\n        });\r\n        scope.on(\"error\", err => Index._util.onError(err));\r\n      }\r\n    } else {\r\n      Index._app.listen(port);\r\n    }\r\n  };\r\n\r\n};\r\n"
  },
  {
    "__docId__": 75,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Index",
    "memberof": "src/index.js",
    "longname": "src/index.js~Index",
    "access": null,
    "export": true,
    "importPath": "popcorn-api/src/index.js",
    "importStyle": "Index",
    "description": "Class for starting the API.",
    "examples": [
      "<caption></caption>\n// Simply start the API by creating a new instance of the Index class.\nconst index = new Index();",
      "// Or override the default configuration of the Index class.\nconst index = new Index({start: true, pretty: true, debug: false});"
    ],
    "lineNumber": 26,
    "interface": false
  },
  {
    "__docId__": 76,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/index.js~Index",
    "longname": "src/index.js~Index#constructor",
    "access": null,
    "description": "Create an index object.",
    "lineNumber": 35,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "config",
        "description": "Configuration for the API."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "config.start",
        "description": "Start the scraping process."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "config.pretty",
        "description": "Pretty output with Winston logging."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "config.debug",
        "description": "Debug mode for extra output."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 77,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "_startAPI",
    "memberof": "src/index.js~Index",
    "longname": "src/index.js~Index._startAPI",
    "access": null,
    "description": "Function to start the API.",
    "lineNumber": 77,
    "params": [
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "start",
        "description": "Start the scraping."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 78,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/models/Anime.js",
    "memberof": null,
    "longname": "src/models/Anime.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "// Import the neccesary modules.\r\nimport mongoose from \"mongoose\";\r\n\r\n// The anime schema used by mongoose.\r\nconst AnimeSchema = new mongoose.Schema({\r\n  _id: {\r\n    type: String,\r\n    required: true,\r\n    index: {\r\n      unique: true\r\n    }\r\n  },\r\n  mal_id: String,\r\n  title: String,\r\n  year: String,\r\n  slug: String,\r\n  synopsis: String,\r\n  runtime: String,\r\n  status: String,\r\n  rating: {\r\n    percentage: Number,\r\n    watching: Number,\r\n    votes: Number,\r\n    loved: Number,\r\n    hated: Number\r\n  },\r\n  type: String,\r\n  num_episodes: Number,\r\n  last_updated: Number,\r\n  latest_episode: {type: Number, default: 0},\r\n  images: {\r\n    banner: String,\r\n    fanart: String,\r\n    poster: String\r\n  },\r\n  genres: [],\r\n  episodes: []\r\n});\r\n\r\n// Create the anime model.\r\nconst Anime = mongoose.model(\"Anime\", AnimeSchema);\r\n\r\n/**\r\n * A model object for anime shows.\r\n * @type {Anime}\r\n */\r\nexport default Anime;\r\n"
  },
  {
    "__docId__": 79,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "AnimeSchema",
    "memberof": "src/models/Anime.js",
    "longname": "src/models/Anime.js~AnimeSchema",
    "access": null,
    "export": false,
    "importPath": "popcorn-api/src/models/Anime.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 80,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "Anime",
    "memberof": "src/models/Anime.js",
    "longname": "src/models/Anime.js~Anime",
    "access": null,
    "export": true,
    "importPath": "popcorn-api/src/models/Anime.js",
    "importStyle": "Anime",
    "description": "A model object for anime shows.",
    "lineNumber": 41,
    "type": {
      "nullable": null,
      "types": [
        "Anime"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 81,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/models/Movie.js",
    "memberof": null,
    "longname": "src/models/Movie.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "// Import the neccesary modules.\r\nimport mongoose from \"mongoose\";\r\n\r\n// The movie schema used by mongoose.\r\nconst MovieSchema = new mongoose.Schema({\r\n  _id: {\r\n    type: String,\r\n    required: true,\r\n    index: {\r\n      unique: true\r\n    }\r\n  },\r\n  imdb_id: String,\r\n  title: String,\r\n  year: String,\r\n  slug: String,\r\n  synopsis: String,\r\n  runtime: String,\r\n  rating: {\r\n    percentage: Number,\r\n    watching: Number,\r\n    votes: Number,\r\n    loved: Number,\r\n    hated: Number\r\n  },\r\n  country: String,\r\n  last_updated: Number,\r\n  images: {\r\n    banner: String,\r\n    fanart: String,\r\n    poster: String\r\n  },\r\n  genres: [],\r\n  released: Number,\r\n  trailer: String,\r\n  certification: String,\r\n  torrents: {}\r\n});\r\n\r\n// Create the movie model.\r\nconst Movie = mongoose.model(\"Movie\", MovieSchema);\r\n\r\n/**\r\n * A model object for movies.\r\n * @type {Movie}\r\n */\r\nexport default Movie;\r\n"
  },
  {
    "__docId__": 82,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "MovieSchema",
    "memberof": "src/models/Movie.js",
    "longname": "src/models/Movie.js~MovieSchema",
    "access": null,
    "export": false,
    "importPath": "popcorn-api/src/models/Movie.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 83,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "Movie",
    "memberof": "src/models/Movie.js",
    "longname": "src/models/Movie.js~Movie",
    "access": null,
    "export": true,
    "importPath": "popcorn-api/src/models/Movie.js",
    "importStyle": "Movie",
    "description": "A model object for movies.",
    "lineNumber": 41,
    "type": {
      "nullable": null,
      "types": [
        "Movie"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 84,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/models/Show.js",
    "memberof": null,
    "longname": "src/models/Show.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "// Import the neccesary modules.\r\nimport mongoose from \"mongoose\";\r\n\r\n// The show schema used by mongoose.\r\nconst ShowSchema = new mongoose.Schema({\r\n  _id: {\r\n    type: String,\r\n    required: true,\r\n    index: {\r\n      unique: true\r\n    }\r\n  },\r\n  imdb_id: String,\r\n  tvdb_id: String,\r\n  title: String,\r\n  year: String,\r\n  slug: String,\r\n  synopsis: String,\r\n  runtime: String,\r\n  rating: {\r\n    percentage: Number,\r\n    watching: Number,\r\n    votes: Number,\r\n    loved: Number,\r\n    hated: Number\r\n  },\r\n  country: String,\r\n  network: String,\r\n  air_day: String,\r\n  air_time: String,\r\n  status: String,\r\n  num_seasons: Number,\r\n  last_updated: Number,\r\n  latest_episode: {type: Number, default: 0},\r\n  images: {\r\n    banner: String,\r\n    fanart: String,\r\n    poster: String\r\n  },\r\n  genres: [],\r\n  episodes: []\r\n});\r\n\r\n// Create the show model.\r\nconst Show = mongoose.model(\"Show\", ShowSchema);\r\n\r\n/**\r\n * A model object for shows.\r\n * @type {Show}\r\n */\r\nexport default Show;\r\n"
  },
  {
    "__docId__": 85,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "ShowSchema",
    "memberof": "src/models/Show.js",
    "longname": "src/models/Show.js~ShowSchema",
    "access": null,
    "export": false,
    "importPath": "popcorn-api/src/models/Show.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 86,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "Show",
    "memberof": "src/models/Show.js",
    "longname": "src/models/Show.js~Show",
    "access": null,
    "export": true,
    "importPath": "popcorn-api/src/models/Show.js",
    "importStyle": "Show",
    "description": "A model object for shows.",
    "lineNumber": 45,
    "type": {
      "nullable": null,
      "types": [
        "Show"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 87,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/popcorn-api.js",
    "memberof": null,
    "longname": "src/popcorn-api.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "#!/usr/bin/env node\r\n\r\n// Import the neccesary modules.\r\nimport CLI from \"./cli\";\r\n\r\n// Run the CLI program.\r\nnew CLI().run();\r\n"
  },
  {
    "__docId__": 88,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/providers/anime/helper.js",
    "memberof": null,
    "longname": "src/providers/anime/helper.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "// Import the neccesary modules.\r\nimport asyncq from \"async-q\";\r\nimport HummingbirdAPI from \"hummingbird-api\";\r\n\r\nimport Anime from \"../../models/Anime\";\r\nimport Util from \"../../util\";\r\n\r\n/** class for saving anime shows. */\r\nexport default class Helper {\r\n\r\n  /**\r\n   * Create an helper object.\r\n   * @param {String} name - The name of the helper.\r\n   */\r\n  constructor(name, debug) {\r\n    /**\r\n     * The name of the torrent provider.\r\n     * @type {String}  The name of the torrent provider.\r\n     */\r\n    this.name = name;\r\n\r\n    /**\r\n     * A configured HummingBird API.\r\n     * @type {HummingbirdAPI}\r\n     * @see https://github.com/ChrisAlderson/hummingbird-api\r\n     */\r\n    this._hummingbird = new HummingbirdAPI({ debug });\r\n\r\n    /**\r\n     * The util object with general functions.\r\n     * @type {Util}\r\n     */\r\n    this._util = new Util();\r\n  };\r\n\r\n  /**\r\n   * Update the number of episodes of a given anime\r\n   * @param {Anime} anime - The anime to update the number of episodes.\r\n   * @returns {Anime} - A newly updated anime.\r\n   */\r\n  async _updateNumEpisodes(anime) {\r\n    anime.num_episodes = anime.episodes.length;\r\n    return await Anime.findOneAndUpdate({\r\n      _id: anime._id\r\n    }, anime, {\r\n      new: true,\r\n      upsert: true\r\n    }).exec();\r\n  };\r\n\r\n  /**\r\n   * Update the torrents for an existing anime.\r\n   * @param {Object} matching - The matching episode of new the anime.\r\n   * @param {Object} found - The matching episode existing anime.\r\n   * @param {Anime} anime - The anime to merge the episodes to.\r\n   * @param {String} quality - The quality of the torrent.\r\n   * @returns {Anime} - An anime with merged torrents.\r\n   */\r\n  _updateEpisode(matching, found, anime, quality) {\r\n    let index = anime.episodes.indexOf(matching);\r\n\r\n    if (found.torrents[quality] && matching.torrents[quality]) {\r\n      let update = false;\r\n\r\n      if (found.torrents[quality].seeds > matching.torrents[quality].seeds) {\r\n        update = true;\r\n      } else if (matching.torrents[quality].seeds > found.torrents[quality].seeds) {\r\n        update = false;\r\n      } else if (found.torrents[quality].url === matching.torrents[quality].url) {\r\n        update = true;\r\n      }\r\n\r\n      if (update) {\r\n        if (quality === \"480p\") matching.torrents[\"0\"] = found.torrents[quality];\r\n        matching.torrents[quality] = found.torrents[quality];\r\n      }\r\n    } else if (found.torrents[quality] && !matching.torrents[quality]) {\r\n      if (quality === \"480p\") matching.torrents[\"0\"] = found.torrents[quality];\r\n      matching.torrents[quality] = found.torrents[quality];\r\n    }\r\n\r\n    anime.episodes.splice(index, 1, matching);\r\n    return anime;\r\n  };\r\n\r\n  /**\r\n   * Update a given anime with it's associated episodes.\r\n   * @param {Anime} anime - The anime to update its episodes.\r\n   * @returns {Anime} - A newly updated anime.\r\n   */\r\n  async _updateEpisodes(anime) {\r\n    try {\r\n      const found = await Anime.findOne({\r\n          _id: anime._id\r\n        }).exec();\r\n      if (found) {\r\n        console.log(`${this.name}: '${found.title}' is an existing anime.`);\r\n        for (let i = 0; i < found.episodes.length; i++) {\r\n          let matching = anime.episodes\r\n            .filter(animeEpisode => animeEpisode.episode === found.episodes[i].episode);\r\n\r\n          if (matching.length != 0) {\r\n            anime = this._updateEpisode(matching[0], found.episodes[i], anime, \"480p\");\r\n            anime = this._updateEpisode(matching[0], found.episodes[i], anime, \"720p\");\r\n            anime = this._updateEpisode(matching[0], found.episodes[i], anime, \"1080p\");\r\n          } else {\r\n            anime.episodes.push(found.episodes[i]);\r\n          }\r\n        }\r\n\r\n        return await this._updateNumEpisodes(anime);\r\n      } else {\r\n        console.log(`${this.name}: '${anime.title}' is a new anime!`);\r\n        const newAnime = await new Anime(anime).save();\r\n        return await this._updateNumEpisodes(newAnime);\r\n      }\r\n    } catch (err) {\r\n      return this._util.onError(err);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Adds one season to a anime.\r\n   * @param {Anime} anime - The anime to add the torrents to.\r\n   * @param {Object} episodes - The episodes containing the torrents.\r\n   * @param {Integer} seasonNumber - The season number.\r\n   * @param {String} slug - The slug of the anime.\r\n   * @returns {Anime} - A new anime with seasons.\r\n   */\r\n  async _addSeason(anime, episodes, seasonNumber, slug) {\r\n    try {\r\n      await asyncq.each(Object.keys(episodes[seasonNumber]), episodeNumber => {\r\n        const episode = {\r\n          title: `Episode ${episodeNumber}`,\r\n          torrents: {},\r\n          season: seasonNumber,\r\n          episode: episodeNumber,\r\n          overview: `We still don't have single episode overviews for anime… Sorry`,\r\n          tvdb_id: `${anime._id}-1-${episodeNumber}`\r\n        };\r\n\r\n        episode.torrents = episodes[seasonNumber][episodeNumber];\r\n        episode.torrents[0] = episodes[seasonNumber][episodeNumber][\"480p\"] ? episodes[seasonNumber][episodeNumber][\"480p\"] : episodes[seasonNumber][episodeNumber][\"720p\"];\r\n        anime.episodes.push(episode);\r\n      });\r\n    } catch (err) {\r\n      return this._util.onError(`Hummingbird: Could not find any data on: ${err.path || err} with slug: '${slug}'`);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Get info from Hummingbird and make a new anime object.\r\n   * @param {String} slug - The slug to query https://hummingbird.me/.\r\n   * @returns {Anime} - A new anime without the episodes attached.\r\n   */\r\n  async getHummingbirdInfo(slug) {\r\n    try {\r\n      const hummingbirdAnime = await this._hummingbird.Anime.getAnime(slug);\r\n\r\n      let type;\r\n      if (hummingbirdAnime.show_type.match(/tv/i)) {\r\n        type = \"show\";\r\n      } else {\r\n        type = \"movie\";\r\n      }\r\n\r\n      const genres = hummingbirdAnime.genres.map(genre => genre.name);\r\n\r\n      if (hummingbirdAnime && hummingbirdAnime.id) {\r\n        return {\r\n          _id: hummingbirdAnime.id,\r\n          mal_id: hummingbirdAnime.mal_id,\r\n          title: hummingbirdAnime.title,\r\n          year: new Date(hummingbirdAnime.started_airing).getFullYear(),\r\n          slug: hummingbirdAnime.slug,\r\n          synopsis: hummingbirdAnime.synopsis,\r\n          runtime: hummingbirdAnime.episode_length,\r\n          status: hummingbirdAnime.status,\r\n          rating: {\r\n            hated: 100,\r\n            loved: 100,\r\n            votes: 0,\r\n            watching: 0,\r\n            percentage: (Math.round(hummingbirdAnime.community_rating * 10)) * 2,\r\n          },\r\n          type,\r\n          num_episodes: 0,\r\n          last_updated: Number(new Date()),\r\n          images: {\r\n            banner: hummingbirdAnime.cover_image !== null ? hummingbirdAnime.cover_image : \"images/posterholder.png\",\r\n            fanart: hummingbirdAnime.cover_image !== null ? hummingbirdAnime.cover_image : \"images/posterholder.png\",\r\n            poster: hummingbirdAnime.cover_image !== null ? hummingbirdAnime.cover_image : \"images/posterholder.png\"\r\n          },\r\n          genres: genres !== null ? genres : [\"unknown\"],\r\n          episodes: []\r\n        };\r\n      }\r\n    } catch (err) {\r\n      return this._util.onError(`Hummingbird: Could not find any data on: ${err.path || err} with slug: '${slug}'`);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Adds episodes to a anime.\r\n   * @param {Show} anime - The anime to add the torrents to.\r\n   * @param {Object} episodes - The episodes containing the torrents.\r\n   * @param {String} slug - The slug of the anime.\r\n   * @returns {Anime} - A anime with updated torrents.\r\n   */\r\n  async addEpisodes(anime, episodes, slug) {\r\n    try {\r\n      await asyncq.each(Object.keys(episodes), seasonNumber => this._addSeason(anime, episodes, seasonNumber, slug));\r\n      return await this._updateEpisodes(anime);\r\n    } catch (err) {\r\n      return this._util.onError(err);\r\n    }\r\n  };\r\n\r\n};\r\n"
  },
  {
    "__docId__": 89,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Helper",
    "memberof": "src/providers/anime/helper.js",
    "longname": "src/providers/anime/helper.js~Helper",
    "access": null,
    "export": true,
    "importPath": "popcorn-api/src/providers/anime/helper.js",
    "importStyle": "Helper",
    "description": "class for saving anime shows.",
    "lineNumber": 9,
    "interface": false
  },
  {
    "__docId__": 90,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/providers/anime/helper.js~Helper",
    "longname": "src/providers/anime/helper.js~Helper#constructor",
    "access": null,
    "description": "Create an helper object.",
    "lineNumber": 15,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The name of the helper."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 91,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "name",
    "memberof": "src/providers/anime/helper.js~Helper",
    "longname": "src/providers/anime/helper.js~Helper#name",
    "access": null,
    "description": "The name of the torrent provider.",
    "lineNumber": 20,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 92,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_hummingbird",
    "memberof": "src/providers/anime/helper.js~Helper",
    "longname": "src/providers/anime/helper.js~Helper#_hummingbird",
    "access": null,
    "description": "A configured HummingBird API.",
    "see": [
      "https://github.com/ChrisAlderson/hummingbird-api"
    ],
    "lineNumber": 27,
    "type": {
      "nullable": null,
      "types": [
        "HummingbirdAPI"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 93,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_util",
    "memberof": "src/providers/anime/helper.js~Helper",
    "longname": "src/providers/anime/helper.js~Helper#_util",
    "access": null,
    "description": "The util object with general functions.",
    "lineNumber": 33,
    "type": {
      "nullable": null,
      "types": [
        "Util"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 94,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_updateNumEpisodes",
    "memberof": "src/providers/anime/helper.js~Helper",
    "longname": "src/providers/anime/helper.js~Helper#_updateNumEpisodes",
    "access": null,
    "description": "Update the number of episodes of a given anime",
    "lineNumber": 41,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Anime} - A newly updated anime."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Anime"
        ],
        "spread": false,
        "optional": false,
        "name": "anime",
        "description": "The anime to update the number of episodes."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Anime"
      ],
      "spread": false,
      "description": "A newly updated anime."
    },
    "generator": false
  },
  {
    "__docId__": 95,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_updateEpisode",
    "memberof": "src/providers/anime/helper.js~Helper",
    "longname": "src/providers/anime/helper.js~Helper#_updateEpisode",
    "access": null,
    "description": "Update the torrents for an existing anime.",
    "lineNumber": 59,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Anime} - An anime with merged torrents."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "matching",
        "description": "The matching episode of new the anime."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "found",
        "description": "The matching episode existing anime."
      },
      {
        "nullable": null,
        "types": [
          "Anime"
        ],
        "spread": false,
        "optional": false,
        "name": "anime",
        "description": "The anime to merge the episodes to."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "quality",
        "description": "The quality of the torrent."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Anime"
      ],
      "spread": false,
      "description": "An anime with merged torrents."
    },
    "generator": false
  },
  {
    "__docId__": 96,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_updateEpisodes",
    "memberof": "src/providers/anime/helper.js~Helper",
    "longname": "src/providers/anime/helper.js~Helper#_updateEpisodes",
    "access": null,
    "description": "Update a given anime with it's associated episodes.",
    "lineNumber": 91,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Anime} - A newly updated anime."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Anime"
        ],
        "spread": false,
        "optional": false,
        "name": "anime",
        "description": "The anime to update its episodes."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Anime"
      ],
      "spread": false,
      "description": "A newly updated anime."
    },
    "generator": false
  },
  {
    "__docId__": 97,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_addSeason",
    "memberof": "src/providers/anime/helper.js~Helper",
    "longname": "src/providers/anime/helper.js~Helper#_addSeason",
    "access": null,
    "description": "Adds one season to a anime.",
    "lineNumber": 130,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Anime} - A new anime with seasons."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Anime"
        ],
        "spread": false,
        "optional": false,
        "name": "anime",
        "description": "The anime to add the torrents to."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "episodes",
        "description": "The episodes containing the torrents."
      },
      {
        "nullable": null,
        "types": [
          "Integer"
        ],
        "spread": false,
        "optional": false,
        "name": "seasonNumber",
        "description": "The season number."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "slug",
        "description": "The slug of the anime."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Anime"
      ],
      "spread": false,
      "description": "A new anime with seasons."
    },
    "generator": false
  },
  {
    "__docId__": 98,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getHummingbirdInfo",
    "memberof": "src/providers/anime/helper.js~Helper",
    "longname": "src/providers/anime/helper.js~Helper#getHummingbirdInfo",
    "access": null,
    "description": "Get info from Hummingbird and make a new anime object.",
    "lineNumber": 156,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Anime} - A new anime without the episodes attached."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "slug",
        "description": "The slug to query https://hummingbird.me/."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Anime"
      ],
      "spread": false,
      "description": "A new anime without the episodes attached."
    },
    "generator": false
  },
  {
    "__docId__": 99,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "addEpisodes",
    "memberof": "src/providers/anime/helper.js~Helper",
    "longname": "src/providers/anime/helper.js~Helper#addEpisodes",
    "access": null,
    "description": "Adds episodes to a anime.",
    "lineNumber": 210,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Anime} - A anime with updated torrents."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Show"
        ],
        "spread": false,
        "optional": false,
        "name": "anime",
        "description": "The anime to add the torrents to."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "episodes",
        "description": "The episodes containing the torrents."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "slug",
        "description": "The slug of the anime."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Anime"
      ],
      "spread": false,
      "description": "A anime with updated torrents."
    },
    "generator": false
  },
  {
    "__docId__": 100,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/providers/anime/horriblesubs.js",
    "memberof": null,
    "longname": "src/providers/anime/horriblesubs.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "// Import the neccesary modules.\r\nimport asyncq from \"async-q\";\r\nimport HorribleSubsAPI from \"horriblesubs-api\";\r\nimport { maxWebRequest } from \"../../config/constants\";\r\nimport Helper from \"./helper\";\r\nimport Util from \"../../util\";\r\n\r\n/** Class for scraping anime from https://horriblesubs.info/. */\r\nexport default class HorribleSubs {\r\n\r\n  /**\r\n   * Create a horriblesubs object.\r\n   * @param {String} name - The name of the torrent provider.\r\n   * @param {Boolean} debug - Debug mode for extra output.\r\n   */\r\n  constructor(name, debug) {\r\n    /**\r\n     * The name of the torrent provider.\r\n     * @type {String}  The name of the torrent provider.\r\n     */\r\n    this.name = name;\r\n\r\n    /**\r\n     * A configured HorribleSubs API.\r\n     * @type {HorribleSubsAPI}\r\n     * @see https://github.com/ChrisAlderson/horriblesubs-api\r\n     */\r\n    this._horriblesubs = new HorribleSubsAPI({ debug });\r\n\r\n    /**\r\n     * The helper object for adding anime shows.\r\n     * @type {Helper}\r\n     */\r\n    this._helper = new Helper(this.name, debug);\r\n\r\n    /**\r\n     * The util object with general functions.\r\n     * @type {Util}\r\n     */\r\n    this._util = new Util();\r\n  };\r\n\r\n  /**\r\n   * Get a complete show.\r\n   * @param {Object} horribleSubsAnime - anime data from horriblesubs.\r\n   * @returns {Anime} - A complete show.\r\n   */\r\n  async _getAnime(horribleSubsAnime) {\r\n    try {\r\n      if (horribleSubsAnime) {\r\n        horribleSubsAnime = await this._horriblesubs.getAnimeData(horribleSubsAnime);\r\n        const newShow = await this._helper.getHummingbirdInfo(horribleSubsAnime.slug);\r\n\r\n        if (newShow && newShow._id) {\r\n          delete horribleSubsAnime.episodes[0];\r\n          return await this._helper.addEpisodes(newShow, horribleSubsAnime.episodes, horribleSubsAnime.slug);\r\n        }\r\n      }\r\n    } catch (err) {\r\n      return this._util.onError(err);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Returns a list of all the inserted torrents.\r\n   * @returns {Array} - A list of scraped animes.\r\n   */\r\n  async search() {\r\n    try {\r\n      console.log(`${this.name}: Starting scraping...`);\r\n      const horribleSubsAnimes = await this._horriblesubs.getAllAnime();\r\n      console.log(`${this.name}: Found ${horribleSubsAnimes.length} anime shows.`);\r\n      return await asyncq.mapLimit(horribleSubsAnimes, maxWebRequest, async horribleSubsAnime => {\r\n        try {\r\n          return await this._getAnime(horribleSubsAnime);\r\n        } catch (err) {\r\n          return this._util.onError(err);\r\n        }\r\n      });\r\n    } catch (err) {\r\n      return this._util.onError(err);\r\n    }\r\n  };\r\n\r\n};\r\n"
  },
  {
    "__docId__": 101,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "HorribleSubs",
    "memberof": "src/providers/anime/horriblesubs.js",
    "longname": "src/providers/anime/horriblesubs.js~HorribleSubs",
    "access": null,
    "export": true,
    "importPath": "popcorn-api/src/providers/anime/horriblesubs.js",
    "importStyle": "HorribleSubs",
    "description": "Class for scraping anime from https://horriblesubs.info/.",
    "lineNumber": 9,
    "interface": false
  },
  {
    "__docId__": 102,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/providers/anime/horriblesubs.js~HorribleSubs",
    "longname": "src/providers/anime/horriblesubs.js~HorribleSubs#constructor",
    "access": null,
    "description": "Create a horriblesubs object.",
    "lineNumber": 16,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The name of the torrent provider."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "debug",
        "description": "Debug mode for extra output."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 103,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "name",
    "memberof": "src/providers/anime/horriblesubs.js~HorribleSubs",
    "longname": "src/providers/anime/horriblesubs.js~HorribleSubs#name",
    "access": null,
    "description": "The name of the torrent provider.",
    "lineNumber": 21,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 104,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_horriblesubs",
    "memberof": "src/providers/anime/horriblesubs.js~HorribleSubs",
    "longname": "src/providers/anime/horriblesubs.js~HorribleSubs#_horriblesubs",
    "access": null,
    "description": "A configured HorribleSubs API.",
    "see": [
      "https://github.com/ChrisAlderson/horriblesubs-api"
    ],
    "lineNumber": 28,
    "type": {
      "nullable": null,
      "types": [
        "HorribleSubsAPI"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 105,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_helper",
    "memberof": "src/providers/anime/horriblesubs.js~HorribleSubs",
    "longname": "src/providers/anime/horriblesubs.js~HorribleSubs#_helper",
    "access": null,
    "description": "The helper object for adding anime shows.",
    "lineNumber": 34,
    "type": {
      "nullable": null,
      "types": [
        "Helper"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 106,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_util",
    "memberof": "src/providers/anime/horriblesubs.js~HorribleSubs",
    "longname": "src/providers/anime/horriblesubs.js~HorribleSubs#_util",
    "access": null,
    "description": "The util object with general functions.",
    "lineNumber": 40,
    "type": {
      "nullable": null,
      "types": [
        "Util"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 107,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_getAnime",
    "memberof": "src/providers/anime/horriblesubs.js~HorribleSubs",
    "longname": "src/providers/anime/horriblesubs.js~HorribleSubs#_getAnime",
    "access": null,
    "description": "Get a complete show.",
    "lineNumber": 48,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Anime} - A complete show."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "horribleSubsAnime",
        "description": "anime data from horriblesubs."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Anime"
      ],
      "spread": false,
      "description": "A complete show."
    },
    "generator": false
  },
  {
    "__docId__": 108,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "search",
    "memberof": "src/providers/anime/horriblesubs.js~HorribleSubs",
    "longname": "src/providers/anime/horriblesubs.js~HorribleSubs#search",
    "access": null,
    "description": "Returns a list of all the inserted torrents.",
    "lineNumber": 68,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array} - A list of scraped animes."
      }
    ],
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "A list of scraped animes."
    },
    "generator": false
  },
  {
    "__docId__": 109,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/providers/anime/kat.js",
    "memberof": null,
    "longname": "src/providers/anime/kat.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "// Import the neccesary modules.\r\nimport asyncq from \"async-q\";\r\nimport KatAPI from \"kat-api-pt\";\r\nimport { maxWebRequest, katAnimeMap } from \"../../config/constants\";\r\nimport Helper from \"./helper\";\r\nimport Util from \"../../util\";\r\n\r\n/** Class for scraping anime shows from https://kat.cr/. */\r\nexport default class KAT {\r\n\r\n  /**\r\n   * Create a kat object.\r\n   * @param {String} name - The name of the torrent provider.\r\n   * @param {Boolean} debug - Debug mode for extra output.\r\n   */\r\n  constructor(name, debug) {\r\n    /**\r\n     * The name of the torrent provider.\r\n     * @type {String}  The name of the torrent provider.\r\n     */\r\n    this.name = name;\r\n\r\n    /**\r\n     * The helper object for adding anime shows.\r\n     * @type {Helper}\r\n     */\r\n    this._helper = new Helper(this.name, debug);\r\n\r\n    /**\r\n     * A configured KAT API.\r\n     * @type {KatAPI}\r\n     * @see https://github.com/ChrisAlderson/kat-api-pt\r\n     */\r\n    this._kat = new KatAPI({ debug });\r\n\r\n    /**\r\n     * The util object with general functions.\r\n     * @type {Util}\r\n     */\r\n    this._util = new Util();\r\n  };\r\n\r\n  /**\r\n   * Get all the animes.\r\n   * @param {Object} katAnime - The anime information.\r\n   * @returns {Anime} - An anime.\r\n   */\r\n  async _getAnime(katAnime) {\r\n    try {\r\n      const newAnime = await this._helper.getHummingbirdInfo(katAnime.slug);\r\n      if (newAnime && newAnime._id) {\r\n        const slug = katAnime.slug;\r\n\r\n        delete katAnime.animeTitle;\r\n        delete katAnime.slug;\r\n        delete katAnime.torrentLink;\r\n        delete katAnime.season;\r\n        delete katAnime.episode;\r\n        delete katAnime.quality;\r\n\r\n        return await this._helper.addEpisodes(newAnime, katAnime, slug);\r\n      }\r\n    } catch (err) {\r\n      return this._util.onError(err);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Extract anime information based on a regex.\r\n   * @param {Object} torrent - The torrent to extract the anime information from.\r\n   * @param {Regex} regex - The regex to extract the anime information.\r\n   * @returns {Object} - Information about a anime from the torrent.\r\n   */\r\n  _extractAnime(torrent, regex) {\r\n    let animeTitle = torrent.title.match(regex)[1];\r\n    if (animeTitle.endsWith(\" \")) animeTitle = animeTitle.substring(0, animeTitle.length - 1);\r\n    animeTitle = animeTitle.replace(/\\./g, \" \");\r\n    let slug = animeTitle.replace(/[!]/gi, \"\").replace(/\\s-\\s/gi, \"\").replace(/\\s+/g, \"-\").toLowerCase();\r\n    slug = slug in katAnimeMap ? katAnimeMap[slug] : slug;\r\n\r\n    let season, episode, quality;\r\n    if (torrent.title.match(regex).length >= 5) {\r\n      season = parseInt(torrent.title.match(regex)[2], 10);\r\n      episode = parseInt(torrent.title.match(regex)[3], 10);\r\n      quality = torrent.title.match(regex)[4];\r\n    } else {\r\n      season = 1;\r\n      episode = parseInt(torrent.title.match(regex)[2], 10);\r\n      quality = torrent.title.match(regex)[3];\r\n    }\r\n\r\n    const episodeTorrent = {\r\n      url: torrent.magnet,\r\n      seed: torrent.seeds,\r\n      peer: torrent.peers,\r\n      provider: this.name\r\n    };\r\n\r\n    const anime = { animeTitle, slug, torrentLink: torrent.link, season, episode, quality };\r\n\r\n    if (!anime[season]) anime[season] = {};\r\n    if (!anime[season][episode]) anime[season][episode] = {};\r\n    if (!anime[season][episode][quality] || (anime[season][episode][quality] && anime[season][episode][quality].seed < episodeTorrent.seed))\r\n      anime[season][episode][quality] = episodeTorrent;\r\n\r\n    return anime;\r\n  };\r\n\r\n  /**\r\n   * Get anime info from a given torrent.\r\n   * @param {Object} torrent - A torrent object to extract anime information from.\r\n   * @returns {Object} - Information about an anime from the torrent.\r\n   */\r\n  _getAnimeData(torrent) {\r\n    const secondSeason = /\\[horriblesubs\\].(.*).S(\\d)...(\\d{2,3}).\\[(\\d{3,4}p)\\]/i;\r\n    if (torrent.title.match(secondSeason)) {\r\n      return this._extractAnime(torrent, secondSeason);\r\n    } else {\r\n      console.warn(`${this.name}: Could not find data from torrent: '${torrent.title}'`);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Puts all the found animes from the torrents in an array.\r\n   * @param {Array} torrents - A list of torrents to extract anime information.\r\n   * @returns {Array} - A list of objects with anime information extracted from the torrents.\r\n   */\r\n  async _getAllKATAnimes(torrents) {\r\n    try {\r\n      const animes = [];\r\n      await asyncq.mapSeries(torrents, torrent => {\r\n        if (torrent) {\r\n          const anime = this._getAnimeData(torrent);\r\n          if (anime) {\r\n            if (animes.length != 0) {\r\n              const { animeTitle, slug, season, episode, quality } = anime;\r\n              const matching = animes\r\n                .filter(a => a.animeTitle === animeTitle)\r\n                .filter(a => a.slug === slug);\r\n\r\n              if (matching.length != 0) {\r\n                const index = animes.indexOf(matching[0]);\r\n                if (!matching[0][season]) matching[0][season] = {};\r\n                if (!matching[0][season][episode]) matching[0][season][episode] = {};\r\n                if (!matching[0][season][episode][quality] || (matching[0][season][episode][quality] && matching[0][season][episode][quality].seed < anime[season][episode][quality].seed))\r\n                  matching[0][season][episode][quality] = anime[season][episode][quality];\r\n\r\n                animes.splice(index, 1, matching[0]);\r\n              } else {\r\n                animes.push(anime);\r\n              }\r\n            } else {\r\n              animes.push(anime);\r\n            }\r\n          }\r\n        }\r\n      });\r\n      return animes;\r\n    } catch (err) {\r\n      return this._util.onError(err);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Get all the torrents of a given provider.\r\n   * @param {Integer} totalPages - The total pages of the query.\r\n   * @param {Object} provider - The provider to query https://kat.cr/.\r\n   * @returns {Array} - A list of all the queried torrents.\r\n   */\r\n  async _getAllTorrents(totalPages, provider) {\r\n    try {\r\n      let katTorrents = [];\r\n      await asyncq.timesSeries(totalPages, async page => {\r\n        try {\r\n          provider.query.page = page + 1;\r\n          console.log(`${this.name}: Starting searching KAT on page ${provider.query.page} out of ${totalPages}`);\r\n          const result = await this._kat.search(provider.query);\r\n          katTorrents = katTorrents.concat(result.results);\r\n        } catch (err) {\r\n          return this._util.onError(err);\r\n        }\r\n      });\r\n      console.log(`${this.name}: Found ${katTorrents.length} torrents.`);\r\n      return katTorrents;\r\n    } catch (err) {\r\n      return this._util.onError(err);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Returns a list of all the inserted torrents.\r\n   * @param {Object} provider - The provider to query https://kat.cr/.\r\n   * @returns {Array} - A list of scraped anime shows.\r\n   */\r\n  async search(provider) {\r\n    try {\r\n      console.log(`${this.name}: Starting scraping...`);\r\n      provider.query.page = 1;\r\n      provider.query.category = \"english-translated\";\r\n      provider.query.verified = 1;\r\n      provider.query.adult_filter = 1;\r\n\r\n      const getTotalPages = await this._kat.search(provider.query);\r\n      const totalPages = getTotalPages.totalPages; // Change to 'const' for production.\r\n      if (!totalPages) return this._util.onError(`${this.name}: totalPages returned: '${totalPages}'`);\r\n      // totalPages = 3; // For testing purposes only.\r\n      console.log(`${this.name}: Total pages ${totalPages}`);\r\n\r\n      const katTorrents = await this._getAllTorrents(totalPages, provider);\r\n      const katAnimes = await this._getAllKATAnimes(katTorrents);\r\n      return await asyncq.mapLimit(katAnimes, maxWebRequest,\r\n        katAnime => this._getAnime(katAnime).catch(err => this._util.onError(err)));\r\n    } catch (err) {\r\n      this._util.onError(err);\r\n    }\r\n  };\r\n\r\n};\r\n"
  },
  {
    "__docId__": 110,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "KAT",
    "memberof": "src/providers/anime/kat.js",
    "longname": "src/providers/anime/kat.js~KAT",
    "access": null,
    "export": true,
    "importPath": "popcorn-api/src/providers/anime/kat.js",
    "importStyle": "KAT",
    "description": "Class for scraping anime shows from https://kat.cr/.",
    "lineNumber": 9,
    "interface": false
  },
  {
    "__docId__": 111,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/providers/anime/kat.js~KAT",
    "longname": "src/providers/anime/kat.js~KAT#constructor",
    "access": null,
    "description": "Create a kat object.",
    "lineNumber": 16,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The name of the torrent provider."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "debug",
        "description": "Debug mode for extra output."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 112,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "name",
    "memberof": "src/providers/anime/kat.js~KAT",
    "longname": "src/providers/anime/kat.js~KAT#name",
    "access": null,
    "description": "The name of the torrent provider.",
    "lineNumber": 21,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 113,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_helper",
    "memberof": "src/providers/anime/kat.js~KAT",
    "longname": "src/providers/anime/kat.js~KAT#_helper",
    "access": null,
    "description": "The helper object for adding anime shows.",
    "lineNumber": 27,
    "type": {
      "nullable": null,
      "types": [
        "Helper"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 114,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_kat",
    "memberof": "src/providers/anime/kat.js~KAT",
    "longname": "src/providers/anime/kat.js~KAT#_kat",
    "access": null,
    "description": "A configured KAT API.",
    "see": [
      "https://github.com/ChrisAlderson/kat-api-pt"
    ],
    "lineNumber": 34,
    "type": {
      "nullable": null,
      "types": [
        "KatAPI"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 115,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_util",
    "memberof": "src/providers/anime/kat.js~KAT",
    "longname": "src/providers/anime/kat.js~KAT#_util",
    "access": null,
    "description": "The util object with general functions.",
    "lineNumber": 40,
    "type": {
      "nullable": null,
      "types": [
        "Util"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 116,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_getAnime",
    "memberof": "src/providers/anime/kat.js~KAT",
    "longname": "src/providers/anime/kat.js~KAT#_getAnime",
    "access": null,
    "description": "Get all the animes.",
    "lineNumber": 48,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Anime} - An anime."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "katAnime",
        "description": "The anime information."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Anime"
      ],
      "spread": false,
      "description": "An anime."
    },
    "generator": false
  },
  {
    "__docId__": 117,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_extractAnime",
    "memberof": "src/providers/anime/kat.js~KAT",
    "longname": "src/providers/anime/kat.js~KAT#_extractAnime",
    "access": null,
    "description": "Extract anime information based on a regex.",
    "lineNumber": 74,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} - Information about a anime from the torrent."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "torrent",
        "description": "The torrent to extract the anime information from."
      },
      {
        "nullable": null,
        "types": [
          "Regex"
        ],
        "spread": false,
        "optional": false,
        "name": "regex",
        "description": "The regex to extract the anime information."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "Information about a anime from the torrent."
    },
    "generator": false
  },
  {
    "__docId__": 118,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_getAnimeData",
    "memberof": "src/providers/anime/kat.js~KAT",
    "longname": "src/providers/anime/kat.js~KAT#_getAnimeData",
    "access": null,
    "description": "Get anime info from a given torrent.",
    "lineNumber": 114,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} - Information about an anime from the torrent."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "torrent",
        "description": "A torrent object to extract anime information from."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "Information about an anime from the torrent."
    },
    "generator": false
  },
  {
    "__docId__": 119,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_getAllKATAnimes",
    "memberof": "src/providers/anime/kat.js~KAT",
    "longname": "src/providers/anime/kat.js~KAT#_getAllKATAnimes",
    "access": null,
    "description": "Puts all the found animes from the torrents in an array.",
    "lineNumber": 128,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array} - A list of objects with anime information extracted from the torrents."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "torrents",
        "description": "A list of torrents to extract anime information."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "A list of objects with anime information extracted from the torrents."
    },
    "generator": false
  },
  {
    "__docId__": 120,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_getAllTorrents",
    "memberof": "src/providers/anime/kat.js~KAT",
    "longname": "src/providers/anime/kat.js~KAT#_getAllTorrents",
    "access": null,
    "description": "Get all the torrents of a given provider.",
    "lineNumber": 170,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array} - A list of all the queried torrents."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Integer"
        ],
        "spread": false,
        "optional": false,
        "name": "totalPages",
        "description": "The total pages of the query."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "provider",
        "description": "The provider to query https://kat.cr/."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "A list of all the queried torrents."
    },
    "generator": false
  },
  {
    "__docId__": 121,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "search",
    "memberof": "src/providers/anime/kat.js~KAT",
    "longname": "src/providers/anime/kat.js~KAT#search",
    "access": null,
    "description": "Returns a list of all the inserted torrents.",
    "lineNumber": 195,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array} - A list of scraped anime shows."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "provider",
        "description": "The provider to query https://kat.cr/."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "A list of scraped anime shows."
    },
    "generator": false
  },
  {
    "__docId__": 122,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/providers/movie/helper.js",
    "memberof": null,
    "longname": "src/providers/movie/helper.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "// Import the neccesary modules.\r\nimport asyncq from \"async-q\";\r\n\r\nimport Movie from \"../../models/Movie\";\r\nimport Util from \"../../util\";\r\nimport { trakt } from \"../../config/constants\";\r\n\r\n/** Class for saving movies. */\r\nexport default class Helper {\r\n\r\n  /**\r\n   * Create an helper object.\r\n   * @param {String} name - The name of the helper.\r\n   */\r\n  constructor(name) {\r\n    /**\r\n     * The name of the torrent provider.\r\n     * @type {String}  The name of the torrent provider.\r\n     */\r\n    this.name = name;\r\n\r\n    /**\r\n     * The util object with general functions.\r\n     * @type {Util}\r\n     */\r\n    this._util = new Util();\r\n  };\r\n\r\n  /**\r\n   * Update the torrents for an existing movie.\r\n   * @param {Movie} movie - The new movie.\r\n   * @param {Movie} found - The existing movie.\r\n   * @param {String} language - The language of the torrent.\r\n   * @param {String} quality - The quality of the torrent.\r\n   * @return {Movie} - A movie with merged torrents.\r\n   */\r\n   _updateTorrent(movie, found, language, quality) {\r\n     let update = false;\r\n\r\n     if (found.torrents[language] && movie.torrents[language]) {\r\n       if (found.torrents[language][quality] && movie.torrents[language][quality]) {\r\n         if (found.torrents[language][quality].seed > movie.torrents[language][quality].seed) {\r\n           update = true;\r\n         } else if (movie.torrents[language][quality].seed > found.torrents[language][quality].seed) {\r\n           update = false;\r\n         } else if (found.torrents[language][quality].url === movie.torrents[language][quality].url) {\r\n           update = true;\r\n         }\r\n       } else if (found.torrents[language][quality] && !movie.torrents[language][quality]) {\r\n         update = true;\r\n       }\r\n     } else if (found.torrents[language] && !movie.torrents[language]) {\r\n       if (found.torrents[language][quality]) {\r\n         movie.torrents[language] = {};\r\n         update = true;\r\n       }\r\n     }\r\n\r\n     if (update) movie.torrents[language][quality] = found.torrents[language][quality];\r\n     return movie;\r\n   };\r\n\r\n  /**\r\n   * @description Update a given movie.\r\n   * @function Helper#updateMovie\r\n   * @memberof module:providers/movie/helper\r\n   * @param {Movie} movie - The movie to update its torrent.\r\n   * @returns {Movie} - A newly updated movie.\r\n   */\r\n  async _updateMovie(movie) {\r\n    try {\r\n      const found = await Movie.findOne({\r\n        _id: movie._id\r\n      }).exec();\r\n      if (found) {\r\n        console.log(`${this.name}: '${found.title}' is an existing movie.`);\r\n\r\n        if (found.torrents) {\r\n          Object.keys(found.torrents).forEach(language => {\r\n            movie = this._updateTorrent(movie, found, language, \"720p\");\r\n            movie = this._updateTorrent(movie, found, language, \"1080p\");\r\n          });\r\n        }\r\n\r\n        return await Movie.findOneAndUpdate({\r\n          _id: movie._id\r\n        }, movie).exec();\r\n      } else {\r\n        console.log(`${this.name}: '${movie.title}' is a new movie!`);\r\n        return await new Movie(movie).save();\r\n      }\r\n    } catch (err) {\r\n      return this._util.onError(err);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Adds torrents to a movie.\r\n   * @param {Movie} movie - The movie to add the torrents to.\r\n   * @param {Object} torrents - The torrents to add to the movie.\r\n   * @returns {Movie} - A movie with torrents attached.\r\n   */\r\n  addTorrents(movie, torrents) {\r\n    return asyncq.each(Object.keys(torrents),\r\n        torrent => movie.torrents[torrent] = torrents[torrent])\r\n      .then(value => this._updateMovie(movie));\r\n  };\r\n\r\n  /**\r\n   * Get info from Trakt and make a new movie object.\r\n   * @param {String} slug - The slug to query trakt.tv.\r\n   * @returns {Movie} - A new movie.\r\n   */\r\n  async getTraktInfo(slug) {\r\n    try {\r\n      const traktMovie = await trakt.movies.summary({id: slug, extended: \"full,images\"});\r\n      const traktWatchers = await trakt.movies.watching({id: slug});\r\n\r\n      let watching = 0;\r\n      if (traktWatchers !== null) watching = traktWatchers.length;\r\n\r\n      if (traktMovie && traktMovie.ids[\"imdb\"]) {\r\n        return {\r\n          _id: traktMovie.ids[\"imdb\"],\r\n          imdb_id: traktMovie.ids[\"imdb\"],\r\n          title: traktMovie.title,\r\n          year: traktMovie.year,\r\n          slug: traktMovie.ids[\"slug\"],\r\n          synopsis: traktMovie.overview,\r\n          runtime: traktMovie.runtime,\r\n          rating: {\r\n            hated: 100,\r\n            loved: 100,\r\n            votes: traktMovie.votes,\r\n            watching: watching,\r\n            percentage: Math.round(traktMovie.rating * 10)\r\n          },\r\n          country: traktMovie.language,\r\n          last_updated: Number(new Date()),\r\n          images: {\r\n            banner: traktMovie.images.banner.full !== null ? traktMovie.images.banner.full : \"images/posterholder.png\",\r\n            fanart: traktMovie.images.fanart.full !== null ? traktMovie.images.fanart.full : \"images/posterholder.png\",\r\n            poster: traktMovie.images.poster.full !== null ? traktMovie.images.poster.full : \"images/posterholder.png\"\r\n          },\r\n          genres: traktMovie.genres !== null ? traktMovie.genres : [\"unknown\"],\r\n          released: new Date(traktMovie.released).getTime() / 1000.0,\r\n          trailer: traktMovie.trailer || false,\r\n          certification: traktMovie.certification,\r\n          torrents: {}\r\n        };\r\n      }\r\n    } catch (err) {\r\n      return this._util.onError(`Trakt: Could not find any data on: ${err.path || err} with slug: '${slug}'`);\r\n    }\r\n  };\r\n\r\n};\r\n"
  },
  {
    "__docId__": 123,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Helper",
    "memberof": "src/providers/movie/helper.js",
    "longname": "src/providers/movie/helper.js~Helper",
    "access": null,
    "export": true,
    "importPath": "popcorn-api/src/providers/movie/helper.js",
    "importStyle": "Helper",
    "description": "Class for saving movies.",
    "lineNumber": 9,
    "interface": false
  },
  {
    "__docId__": 124,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/providers/movie/helper.js~Helper",
    "longname": "src/providers/movie/helper.js~Helper#constructor",
    "access": null,
    "description": "Create an helper object.",
    "lineNumber": 15,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The name of the helper."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 125,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "name",
    "memberof": "src/providers/movie/helper.js~Helper",
    "longname": "src/providers/movie/helper.js~Helper#name",
    "access": null,
    "description": "The name of the torrent provider.",
    "lineNumber": 20,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 126,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_util",
    "memberof": "src/providers/movie/helper.js~Helper",
    "longname": "src/providers/movie/helper.js~Helper#_util",
    "access": null,
    "description": "The util object with general functions.",
    "lineNumber": 26,
    "type": {
      "nullable": null,
      "types": [
        "Util"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 127,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_updateTorrent",
    "memberof": "src/providers/movie/helper.js~Helper",
    "longname": "src/providers/movie/helper.js~Helper#_updateTorrent",
    "access": null,
    "description": "Update the torrents for an existing movie.",
    "lineNumber": 37,
    "params": [
      {
        "nullable": null,
        "types": [
          "Movie"
        ],
        "spread": false,
        "optional": false,
        "name": "movie",
        "description": "The new movie."
      },
      {
        "nullable": null,
        "types": [
          "Movie"
        ],
        "spread": false,
        "optional": false,
        "name": "found",
        "description": "The existing movie."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "language",
        "description": "The language of the torrent."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "quality",
        "description": "The quality of the torrent."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Movie"
      ],
      "spread": false,
      "description": "A movie with merged torrents."
    },
    "generator": false
  },
  {
    "__docId__": 128,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_updateMovie",
    "memberof": "src/providers/movie/helper.js~Helper",
    "longname": "src/providers/movie/helper.js~Helper#_updateMovie",
    "access": null,
    "description": "",
    "lineNumber": 70,
    "unknown": [
      {
        "tagName": "@description",
        "tagValue": "Update a given movie."
      },
      {
        "tagName": "@function",
        "tagValue": "Helper#updateMovie"
      },
      {
        "tagName": "@memberof",
        "tagValue": "module:providers/movie/helper"
      },
      {
        "tagName": "@returns",
        "tagValue": "{Movie} - A newly updated movie."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Movie"
        ],
        "spread": false,
        "optional": false,
        "name": "movie",
        "description": "The movie to update its torrent."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Movie"
      ],
      "spread": false,
      "description": "A newly updated movie."
    },
    "generator": false
  },
  {
    "__docId__": 129,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "addTorrents",
    "memberof": "src/providers/movie/helper.js~Helper",
    "longname": "src/providers/movie/helper.js~Helper#addTorrents",
    "access": null,
    "description": "Adds torrents to a movie.",
    "lineNumber": 103,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Movie} - A movie with torrents attached."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Movie"
        ],
        "spread": false,
        "optional": false,
        "name": "movie",
        "description": "The movie to add the torrents to."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "torrents",
        "description": "The torrents to add to the movie."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Movie"
      ],
      "spread": false,
      "description": "A movie with torrents attached."
    },
    "generator": false
  },
  {
    "__docId__": 130,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getTraktInfo",
    "memberof": "src/providers/movie/helper.js~Helper",
    "longname": "src/providers/movie/helper.js~Helper#getTraktInfo",
    "access": null,
    "description": "Get info from Trakt and make a new movie object.",
    "lineNumber": 114,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Movie} - A new movie."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "slug",
        "description": "The slug to query trakt.tv."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Movie"
      ],
      "spread": false,
      "description": "A new movie."
    },
    "generator": false
  },
  {
    "__docId__": 131,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/providers/movie/kat.js",
    "memberof": null,
    "longname": "src/providers/movie/kat.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "// Import the neccesary modules.\r\nimport asyncq from \"async-q\";\r\nimport KatAPI from \"kat-api-pt\";\r\nimport { maxWebRequest, katMap } from \"../../config/constants\";\r\nimport Helper from \"./helper\";\r\nimport Util from \"../../util\";\r\n\r\n/** Class for scraping movies from https://kat.cr/. */\r\nexport default class KAT {\r\n\r\n  /**\r\n   * Create a kat object.\r\n   * @param {String} name - The name of the torrent provider.\r\n   * @param {Boolean} debug - Debug mode for extra output.\r\n   */\r\n  constructor(name, debug) {\r\n    /**\r\n     * The name of the torrent provider.\r\n     * @type {String}  The name of the torrent provider.\r\n     */\r\n    this.name = name;\r\n\r\n    /**\r\n     * The helper object for adding movies.\r\n     * @type {Helper}\r\n     */\r\n    this._helper = new Helper(this.name);\r\n\r\n    /**\r\n     * A configured KAT API.\r\n     * @type {KatAPI}\r\n     * @see https://github.com/ChrisAlderson/kat-api-pt\r\n     */\r\n    this._kat = new KatAPI({ debug });\r\n\r\n    /**\r\n     * The util object with general functions.\r\n     * @type {Util}\r\n     */\r\n    this._util = new Util();\r\n  };\r\n\r\n  /**\r\n   * Get all the movies.\r\n   * @param {Object} katMovie - The movie information.\r\n   * @returns {Movie} - A movie.\r\n   */\r\n  async _getMovie(katMovie) {\r\n    try {\r\n      const newMovie = await this._helper.getTraktInfo(katMovie.slugYear);\r\n      if (newMovie && newMovie._id) {\r\n        delete katMovie.movieTitle;\r\n        delete katMovie.slug;\r\n        delete katMovie.slugYear;\r\n        delete katMovie.torrentLink;\r\n        delete katMovie.quality;\r\n        delete katMovie.year;\r\n        delete katMovie.language;\r\n\r\n        return await this._helper.addTorrents(newMovie, katMovie);\r\n      }\r\n    } catch (err) {\r\n      return this._util.onError(err);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Extract movie information based on a regex.\r\n   * @param {Object} torrent - The torrent to extract the movie information from.\r\n   * @param {String} language - The language of the torrent.\r\n   * @param {Regex} regex - The regex to extract the movie information.\r\n   * @returns {Object} - Information about a movie from the torrent.\r\n   */\r\n  _extractMovie(torrent, language, regex) {\r\n    let movieTitle = torrent.title.match(regex)[1];\r\n    if (movieTitle.endsWith(\" \")) movieTitle = movieTitle.substring(0, movieTitle.length - 1);\r\n    movieTitle = movieTitle.replace(/\\./g, \" \");\r\n    let slug = movieTitle.replace(/\\s+/g, \"-\").toLowerCase();\r\n    slug = slug in katMap ? katMap[slug] : slug;\r\n    const year = torrent.title.match(regex)[2];\r\n    const quality = torrent.title.match(regex)[3];\r\n\r\n    const movie = { movieTitle, slug, slugYear: `${slug}-${year}`, torrentLink: torrent.link, year, quality, language };\r\n\r\n    movie[language] = {};\r\n    movie[language][quality] = {\r\n      url: torrent.magnet,\r\n      seed: torrent.seeds,\r\n      peer: torrent.peers,\r\n      size: torrent.size,\r\n      fileSize: torrent.fileSize,\r\n      provider: this.name\r\n    };\r\n\r\n    return movie;\r\n  };\r\n\r\n  /**\r\n   * Get movie info from a given torrent.\r\n   * @param {Object} torrent - A torrent object to extract movie information from.\r\n   * @param {String} language - The language of the torrent.\r\n   * @returns {Object} - Information about a movie from the torrent.\r\n   */\r\n  _getMovieData(torrent, language) {\r\n    const threeDimensions = /(.*).(\\d{4}).[3Dd]\\D+(\\d{3,4}p)/;\r\n    const fourKay = /(.*).(\\d{4}).[4k]\\D+(\\d{3,4}p)/;\r\n    const withYear = /(.*).(\\d{4})\\D+(\\d{3,4}p)/;\r\n    if (torrent.title.match(threeDimensions)) {\r\n      return this._extractMovie(torrent, language, threeDimensions);\r\n    } else if (torrent.title.match(fourKay)) {\r\n      return this._extractMovie(torrent, language, fourKay);\r\n    } else if (torrent.title.match(withYear)) {\r\n      return this._extractMovie(torrent, language, withYear);\r\n    } else {\r\n      console.warn(`${this.name}: Could not find data from torrent: '${torrent.title}'`);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Puts all the found movies from the torrents in an array.\r\n   * @param {Array} torrents - A list of torrents to extract movie information.\r\n   * @param {String} language - The language of the torrent.\r\n   * @returns {Array} - A list of objects with movie information extracted from the torrents.\r\n   */\r\n  async _getAllKATMovies(torrents, language) {\r\n    try {\r\n      const movies = [];\r\n      await asyncq.mapSeries(torrents, torrent => {\r\n        if (torrent) {\r\n          const movie = this._getMovieData(torrent, language);\r\n          if (movie) {\r\n            if (movies.length != 0) {\r\n              const { movieTitle, slug, language, quality } = movie;\r\n              const matching = movies\r\n                .filter(m => m.movieTitle === movieTitle)\r\n                .filter(m => m.slug === slug);\r\n\r\n              if (matching.length != 0) {\r\n                const index = movies.indexOf(matching[0]);\r\n                if (!matching[0][language][quality]) matching[0][language][quality] = movie[language][quality];\r\n\r\n                movies.splice(index, 1, matching[0]);\r\n              } else {\r\n                movies.push(movie);\r\n              }\r\n            } else {\r\n              movies.push(movie);\r\n            }\r\n          }\r\n        }\r\n      });\r\n      return movies;\r\n    } catch (err) {\r\n      return this._util.onError(err);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Get all the torrents of a given provider.\r\n   * @param {Integer} totalPages - The total pages of the query.\r\n   * @param {Object} provider - The provider to query https://kat.cr/.\r\n   * @returns {Array} - A list of all the queried torrents.\r\n   */\r\n  async _getAllTorrents(totalPages, provider) {\r\n    try {\r\n      let katTorrents = [];\r\n      await asyncq.timesSeries(totalPages, async page => {\r\n        try {\r\n          provider.query.page = page + 1;\r\n          console.log(`${this.name}: Starting searching KAT on page ${provider.query.page} out of ${totalPages}`);\r\n          const result = await this._kat.search(provider.query);\r\n          katTorrents = katTorrents.concat(result.results);\r\n        } catch (err) {\r\n          return this._util.onError(err);\r\n        }\r\n      });\r\n      console.log(`${this.name}: Found ${katTorrents.length} torrents.`);\r\n      return katTorrents;\r\n    } catch (err) {\r\n      return this._util.onError(err);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Returns a list of all the inserted torrents.\r\n   * @param {Object} provider - The provider to query https://kat.cr/.\r\n   * @returns {Array} - A list of scraped movies.\r\n   */\r\n  async search(provider) {\r\n    try {\r\n      if (!provider.query.language) return this._util.onError(`Provider with name: '${this.name}' does not have a language set!`);\r\n\r\n      console.log(`${this.name}: Starting scraping...`);\r\n      provider.query.page = 1;\r\n      provider.query.category = \"movies\";\r\n      provider.query.verified = 1;\r\n      provider.query.adult_filter = 1;\r\n\r\n      const getTotalPages = await this._kat.search(provider.query);\r\n      const totalPages = getTotalPages.totalPages; // Change to 'const' for production.\r\n      if (!totalPages) return this._util.onError(`${this.name}: totalPages returned: '${totalPages}'`);\r\n      // totalPages = 3; // For testing purposes only.\r\n      console.log(`${this.name}: Total pages ${totalPages}`);\r\n\r\n      const katTorrents = await this._getAllTorrents(totalPages, provider);\r\n      const katMovies = await this._getAllKATMovies(katTorrents, provider.query.language);\r\n      return await asyncq.mapLimit(katMovies, maxWebRequest,\r\n        katMovie => this._getMovie(katMovie).catch(err => this._util.onError(err)));\r\n    } catch (err) {\r\n      this._util.onError(err);\r\n    }\r\n  };\r\n\r\n};\r\n"
  },
  {
    "__docId__": 132,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "KAT",
    "memberof": "src/providers/movie/kat.js",
    "longname": "src/providers/movie/kat.js~KAT",
    "access": null,
    "export": true,
    "importPath": "popcorn-api/src/providers/movie/kat.js",
    "importStyle": "KAT",
    "description": "Class for scraping movies from https://kat.cr/.",
    "lineNumber": 9,
    "interface": false
  },
  {
    "__docId__": 133,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/providers/movie/kat.js~KAT",
    "longname": "src/providers/movie/kat.js~KAT#constructor",
    "access": null,
    "description": "Create a kat object.",
    "lineNumber": 16,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The name of the torrent provider."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "debug",
        "description": "Debug mode for extra output."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 134,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "name",
    "memberof": "src/providers/movie/kat.js~KAT",
    "longname": "src/providers/movie/kat.js~KAT#name",
    "access": null,
    "description": "The name of the torrent provider.",
    "lineNumber": 21,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 135,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_helper",
    "memberof": "src/providers/movie/kat.js~KAT",
    "longname": "src/providers/movie/kat.js~KAT#_helper",
    "access": null,
    "description": "The helper object for adding movies.",
    "lineNumber": 27,
    "type": {
      "nullable": null,
      "types": [
        "Helper"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 136,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_kat",
    "memberof": "src/providers/movie/kat.js~KAT",
    "longname": "src/providers/movie/kat.js~KAT#_kat",
    "access": null,
    "description": "A configured KAT API.",
    "see": [
      "https://github.com/ChrisAlderson/kat-api-pt"
    ],
    "lineNumber": 34,
    "type": {
      "nullable": null,
      "types": [
        "KatAPI"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 137,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_util",
    "memberof": "src/providers/movie/kat.js~KAT",
    "longname": "src/providers/movie/kat.js~KAT#_util",
    "access": null,
    "description": "The util object with general functions.",
    "lineNumber": 40,
    "type": {
      "nullable": null,
      "types": [
        "Util"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 138,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_getMovie",
    "memberof": "src/providers/movie/kat.js~KAT",
    "longname": "src/providers/movie/kat.js~KAT#_getMovie",
    "access": null,
    "description": "Get all the movies.",
    "lineNumber": 48,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Movie} - A movie."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "katMovie",
        "description": "The movie information."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Movie"
      ],
      "spread": false,
      "description": "A movie."
    },
    "generator": false
  },
  {
    "__docId__": 139,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_extractMovie",
    "memberof": "src/providers/movie/kat.js~KAT",
    "longname": "src/providers/movie/kat.js~KAT#_extractMovie",
    "access": null,
    "description": "Extract movie information based on a regex.",
    "lineNumber": 74,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} - Information about a movie from the torrent."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "torrent",
        "description": "The torrent to extract the movie information from."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "language",
        "description": "The language of the torrent."
      },
      {
        "nullable": null,
        "types": [
          "Regex"
        ],
        "spread": false,
        "optional": false,
        "name": "regex",
        "description": "The regex to extract the movie information."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "Information about a movie from the torrent."
    },
    "generator": false
  },
  {
    "__docId__": 140,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_getMovieData",
    "memberof": "src/providers/movie/kat.js~KAT",
    "longname": "src/providers/movie/kat.js~KAT#_getMovieData",
    "access": null,
    "description": "Get movie info from a given torrent.",
    "lineNumber": 104,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} - Information about a movie from the torrent."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "torrent",
        "description": "A torrent object to extract movie information from."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "language",
        "description": "The language of the torrent."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "Information about a movie from the torrent."
    },
    "generator": false
  },
  {
    "__docId__": 141,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_getAllKATMovies",
    "memberof": "src/providers/movie/kat.js~KAT",
    "longname": "src/providers/movie/kat.js~KAT#_getAllKATMovies",
    "access": null,
    "description": "Puts all the found movies from the torrents in an array.",
    "lineNumber": 125,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array} - A list of objects with movie information extracted from the torrents."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "torrents",
        "description": "A list of torrents to extract movie information."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "language",
        "description": "The language of the torrent."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "A list of objects with movie information extracted from the torrents."
    },
    "generator": false
  },
  {
    "__docId__": 142,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_getAllTorrents",
    "memberof": "src/providers/movie/kat.js~KAT",
    "longname": "src/providers/movie/kat.js~KAT#_getAllTorrents",
    "access": null,
    "description": "Get all the torrents of a given provider.",
    "lineNumber": 164,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array} - A list of all the queried torrents."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Integer"
        ],
        "spread": false,
        "optional": false,
        "name": "totalPages",
        "description": "The total pages of the query."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "provider",
        "description": "The provider to query https://kat.cr/."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "A list of all the queried torrents."
    },
    "generator": false
  },
  {
    "__docId__": 143,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "search",
    "memberof": "src/providers/movie/kat.js~KAT",
    "longname": "src/providers/movie/kat.js~KAT#search",
    "access": null,
    "description": "Returns a list of all the inserted torrents.",
    "lineNumber": 189,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array} - A list of scraped movies."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "provider",
        "description": "The provider to query https://kat.cr/."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "A list of scraped movies."
    },
    "generator": false
  },
  {
    "__docId__": 144,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/providers/movie/yts.js",
    "memberof": null,
    "longname": "src/providers/movie/yts.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "// Import the neccesary modules.\r\nimport asyncq from \"async-q\";\r\nimport req from \"request\";\r\nimport Movie from \"../../models/Movie\";\r\nimport { maxWebRequest, webRequestTimeout } from \"../../config/constants\";\r\nimport Helper from \"./helper\";\r\nimport Util from \"../../util\";\r\n\r\n/** Class for scraping movies from https://yts.ag/. */\r\nexport default class YTS {\r\n\r\n  /**\r\n   * Create a yts object.\r\n   * @param {String} name - The name of the torrent provider.\r\n   * @param {Boolean} debug - Debug mode for extra output.\r\n   */\r\n  constructor(name) {\r\n    /**\r\n     * The name of the torrent provider.\r\n     * @type {String}  The name of the torrent provider.\r\n     */\r\n    this.name = name;\r\n\r\n    /**\r\n     * The request object with added defaults.\r\n     * @type {Object}\r\n     */\r\n    this._request = req.defaults({\r\n      \"headers\": {\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      \"baseUrl\": \"https://yts.ag/api/v2/list_movies.json\",\r\n      \"timeout\": webRequestTimeout * 1000\r\n    });\r\n\r\n    /**\r\n     * The helper object for adding movies.\r\n     * @type {Helper}\r\n     */\r\n    this._helper = new Helper(this.name);\r\n\r\n    /**\r\n     * The util object with general functions.\r\n     * @type {Util}\r\n     */\r\n    this._util = new Util();\r\n  };\r\n\r\n  /**\r\n   * Get the total pages to go through.\r\n   * @param {Boolean} [retry=true] - Retry the request.\r\n   * @returns {Promise} - The maximum pages to go through.\r\n   */\r\n  _getTotalPages(retry = true) {\r\n    const url = \"list_movies.json\";\r\n    return new Promise((resolve, reject) => {\r\n      this._request(url, (err, res, body) => {\r\n        if (err && retry) {\r\n          return resolve(this._getTotalPages(false));\r\n        } else if (err) {\r\n          return reject(`YTS: ${err} with link: 'list_movies.json'`);\r\n        } else if (!body || res.statusCode >= 400) {\r\n          return reject(`YTS: Could not find data on '${url}'.`);\r\n        } else {\r\n          body = JSON.parse(body);\r\n          const totalPages = Math.ceil(body.data.movie_count / 50); // Change to 'const' for production.\r\n          return resolve(totalPages);\r\n        }\r\n      });\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Format data from movies.\r\n   * @param {Object} data - Data about the movies.\r\n   * @returns {Object} - An object with the imdb id and the torrents.\r\n   */\r\n  _formatPage(data) {\r\n    return asyncq.each(data, movie => {\r\n      if (movie && movie.torrents && movie.imdb_code && movie.language.match(/english/i)) {\r\n        const torrents = {};\r\n        torrents[\"en\"] = {};\r\n        movie.torrents.forEach(torrent => {\r\n          if (torrent.quality !== \"3D\") {\r\n            torrents[\"en\"][torrent.quality] = {\r\n              url: `magnet:?xt=urn:btih:${torrent.hash}&tr=udp://glotorrents.pw:6969/announce&tr=udp://tracker.opentrackr.org:1337/announce&tr=udp://torrent.gresille.org:80/announce&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.coppersurfer.tk:6969&tr=udp://tracker.leechers-paradise.org:6969&tr=udp://p4p.arenabg.ch:1337&tr=udp://tracker.internetwarriors.net:1337`,\r\n              seed: torrent.seeds,\r\n              peer: torrent.peers,\r\n              size: torrent.size_bytes,\r\n              filesize: torrent.size,\r\n              provider: \"YTS\"\r\n            };\r\n          }\r\n        });\r\n\r\n        return { imdb_id: movie.imdb_code, torrents };\r\n      }\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Get formatted data from one page.\r\n   * @param {Integer} page - The page to get the data from.\r\n   * @param {Boolean} [retry=true] - Retry the function.\r\n   * @returns {Promise} - Formatted data from one page.\r\n   */\r\n  _getOnePage(page, retry = true) {\r\n    const url = `?limit=50&page=${page + 1}`;\r\n    return new Promise((resolve, reject) => {\r\n      this._request(url, (err, res, body) => {\r\n        if (err && retry) {\r\n          return resolve(this._getOnePage(page, false));\r\n        } else if (err) {\r\n          return reject(`YTS: ${err} with link: '?limit=50&page=${page + 1}'`);\r\n        } else if (!body || res.statusCode >= 400) {\r\n          return reject(`YTS: Could not find data on '${url}'.`);\r\n        } else {\r\n          body = JSON.parse(body);\r\n          return resolve(this._formatPage(body.data.movies));\r\n        }\r\n      });\r\n    });\r\n  };\r\n\r\n  /**\r\n   * All the found movies.\r\n   * @returns {Array} - A list of all the found movies.\r\n   */\r\n  async _getMovies() {\r\n    try {\r\n      const totalPages = await this._getTotalPages(); // Change to 'const' for production.\r\n      if (!totalPages) return this._util.onError(`${this.name}: totalPages returned; '${totalPages}'`);\r\n      // totalPages = 3; // For testing purposes only.\r\n      let movies = [];\r\n      return await asyncq.timesSeries(totalPages, async page => {\r\n        try {\r\n          console.log(`${this.name}: Starting searching YTS on page ${page + 1} out of ${totalPages}`);\r\n          const onePage = await this._getOnePage(page);\r\n          movies = movies.concat(onePage);\r\n        } catch (err) {\r\n          return this._util.onError(err);\r\n        }\r\n      }).then(value => movies);\r\n    } catch (err) {\r\n      return this._util.onError(err);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Returns a list of all the inserted torrents.\r\n   * @returns {Array} - A list of scraped movies.\r\n   */\r\n  async search() {\r\n    try {\r\n      console.log(`${this.name}: Starting scraping...`);\r\n      const movies = await this._getMovies();\r\n      return await asyncq.eachLimit(movies, maxWebRequest, async ytsMovie => {\r\n        if (ytsMovie && ytsMovie.imdb_id) {\r\n          const newMovie = await this._helper.getTraktInfo(ytsMovie.imdb_id);\r\n          if (newMovie && newMovie._id) {\r\n            delete ytsMovie.imdb_id;\r\n            return await this._helper.addTorrents(newMovie, ytsMovie.torrents);\r\n          }\r\n        }\r\n      });\r\n    } catch (err) {\r\n      return this._util.onError(err);\r\n    }\r\n  };\r\n\r\n};\r\n"
  },
  {
    "__docId__": 145,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "YTS",
    "memberof": "src/providers/movie/yts.js",
    "longname": "src/providers/movie/yts.js~YTS",
    "access": null,
    "export": true,
    "importPath": "popcorn-api/src/providers/movie/yts.js",
    "importStyle": "YTS",
    "description": "Class for scraping movies from https://yts.ag/.",
    "lineNumber": 10,
    "interface": false
  },
  {
    "__docId__": 146,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/providers/movie/yts.js~YTS",
    "longname": "src/providers/movie/yts.js~YTS#constructor",
    "access": null,
    "description": "Create a yts object.",
    "lineNumber": 17,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The name of the torrent provider."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "debug",
        "description": "Debug mode for extra output."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 147,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "name",
    "memberof": "src/providers/movie/yts.js~YTS",
    "longname": "src/providers/movie/yts.js~YTS#name",
    "access": null,
    "description": "The name of the torrent provider.",
    "lineNumber": 22,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 148,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_request",
    "memberof": "src/providers/movie/yts.js~YTS",
    "longname": "src/providers/movie/yts.js~YTS#_request",
    "access": null,
    "description": "The request object with added defaults.",
    "lineNumber": 28,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 149,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_helper",
    "memberof": "src/providers/movie/yts.js~YTS",
    "longname": "src/providers/movie/yts.js~YTS#_helper",
    "access": null,
    "description": "The helper object for adding movies.",
    "lineNumber": 40,
    "type": {
      "nullable": null,
      "types": [
        "Helper"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 150,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_util",
    "memberof": "src/providers/movie/yts.js~YTS",
    "longname": "src/providers/movie/yts.js~YTS#_util",
    "access": null,
    "description": "The util object with general functions.",
    "lineNumber": 46,
    "type": {
      "nullable": null,
      "types": [
        "Util"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 151,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_getTotalPages",
    "memberof": "src/providers/movie/yts.js~YTS",
    "longname": "src/providers/movie/yts.js~YTS#_getTotalPages",
    "access": null,
    "description": "Get the total pages to go through.",
    "lineNumber": 54,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} - The maximum pages to go through."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "retry",
        "description": "Retry the request."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "The maximum pages to go through."
    },
    "generator": false
  },
  {
    "__docId__": 152,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_formatPage",
    "memberof": "src/providers/movie/yts.js~YTS",
    "longname": "src/providers/movie/yts.js~YTS#_formatPage",
    "access": null,
    "description": "Format data from movies.",
    "lineNumber": 78,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} - An object with the imdb id and the torrents."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "Data about the movies."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "An object with the imdb id and the torrents."
    },
    "generator": false
  },
  {
    "__docId__": 153,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_getOnePage",
    "memberof": "src/providers/movie/yts.js~YTS",
    "longname": "src/providers/movie/yts.js~YTS#_getOnePage",
    "access": null,
    "description": "Get formatted data from one page.",
    "lineNumber": 107,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} - Formatted data from one page."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Integer"
        ],
        "spread": false,
        "optional": false,
        "name": "page",
        "description": "The page to get the data from."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "retry",
        "description": "Retry the function."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Formatted data from one page."
    },
    "generator": false
  },
  {
    "__docId__": 154,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_getMovies",
    "memberof": "src/providers/movie/yts.js~YTS",
    "longname": "src/providers/movie/yts.js~YTS#_getMovies",
    "access": null,
    "description": "All the found movies.",
    "lineNumber": 129,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array} - A list of all the found movies."
      }
    ],
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "A list of all the found movies."
    },
    "generator": false
  },
  {
    "__docId__": 155,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "search",
    "memberof": "src/providers/movie/yts.js~YTS",
    "longname": "src/providers/movie/yts.js~YTS#search",
    "access": null,
    "description": "Returns a list of all the inserted torrents.",
    "lineNumber": 153,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array} - A list of scraped movies."
      }
    ],
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "A list of scraped movies."
    },
    "generator": false
  },
  {
    "__docId__": 156,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/providers/show/eztv.js",
    "memberof": null,
    "longname": "src/providers/show/eztv.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "// Import the neccesary modules.\r\nimport asyncq from \"async-q\";\r\nimport EztvAPI from \"eztv-api-pt\";\r\nimport { maxWebRequest } from \"../../config/constants\";\r\nimport Helper from \"./helper\";\r\nimport Util from \"../../util\";\r\n\r\n/** Class for scraping shows from https://eztv.ag/. */\r\nexport default class EZTV {\r\n\r\n  /**\r\n   * Create an eztv object.\r\n   * @param {String} name - The name of the torrent provider.\r\n   * @param {Boolean} debug - Debug mode for extra output.\r\n   */\r\n  constructor(name, debug) {\r\n    /**\r\n     * The name of the torrent provider.\r\n     * @type {String}  The name of the torrent provider.\r\n     */\r\n    this.name = name;\r\n\r\n    /**\r\n     * A configured EZTV API.\r\n     * @type {EztvAPI}\r\n     * @see https://github.com/ChrisAlderson/eztv-api-pt\r\n     */\r\n    this._eztv = new EztvAPI({ debug });\r\n\r\n    /**\r\n     * The helper object for adding shows.\r\n     * @type {Helper}\r\n     */\r\n    this._helper = new Helper(this.name);\r\n\r\n    /**\r\n     * The util object with general functions.\r\n     * @type {Util}\r\n     */\r\n    this._util = new Util();\r\n  };\r\n\r\n  /**\r\n   * Get a complete show.\r\n   * @param {Object} eztvShow - show data from eztv.\r\n   * @returns {Show} - A complete show.\r\n   */\r\n  async _getShow(eztvShow) {\r\n    try {\r\n      if (eztvShow) {\r\n        eztvShow = await this._eztv.getShowData(eztvShow);\r\n        const newShow = await this._helper.getTraktInfo(eztvShow.slug);\r\n\r\n        if (newShow && newShow._id) {\r\n          delete eztvShow.episodes.dateBased;\r\n          delete eztvShow.episodes[0];\r\n          return await this._helper.addEpisodes(newShow, eztvShow.episodes, eztvShow.slug);\r\n        }\r\n      }\r\n    } catch (err) {\r\n      return this._util.onError(err);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Returns a list of all the inserted torrents.\r\n   * @returns {Array} - A list of scraped shows.\r\n   */\r\n  async search() {\r\n    try {\r\n      console.log(`${this.name}: Starting scraping...`);\r\n      const eztvShows = await this._eztv.getAllShows();\r\n      console.log(`${this.name}: Found ${eztvShows.length} shows.`);\r\n      return await asyncq.mapLimit(eztvShows, maxWebRequest, async eztvShow => {\r\n        try {\r\n          return await this._getShow(eztvShow);\r\n        } catch (err) {\r\n          return this._util.onError(err);\r\n        }\r\n      });\r\n    } catch (err) {\r\n      return this._util.onError(err);\r\n    }\r\n  };\r\n\r\n};\r\n"
  },
  {
    "__docId__": 157,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "EZTV",
    "memberof": "src/providers/show/eztv.js",
    "longname": "src/providers/show/eztv.js~EZTV",
    "access": null,
    "export": true,
    "importPath": "popcorn-api/src/providers/show/eztv.js",
    "importStyle": "EZTV",
    "description": "Class for scraping shows from https://eztv.ag/.",
    "lineNumber": 9,
    "interface": false
  },
  {
    "__docId__": 158,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/providers/show/eztv.js~EZTV",
    "longname": "src/providers/show/eztv.js~EZTV#constructor",
    "access": null,
    "description": "Create an eztv object.",
    "lineNumber": 16,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The name of the torrent provider."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "debug",
        "description": "Debug mode for extra output."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 159,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "name",
    "memberof": "src/providers/show/eztv.js~EZTV",
    "longname": "src/providers/show/eztv.js~EZTV#name",
    "access": null,
    "description": "The name of the torrent provider.",
    "lineNumber": 21,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 160,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_eztv",
    "memberof": "src/providers/show/eztv.js~EZTV",
    "longname": "src/providers/show/eztv.js~EZTV#_eztv",
    "access": null,
    "description": "A configured EZTV API.",
    "see": [
      "https://github.com/ChrisAlderson/eztv-api-pt"
    ],
    "lineNumber": 28,
    "type": {
      "nullable": null,
      "types": [
        "EztvAPI"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 161,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_helper",
    "memberof": "src/providers/show/eztv.js~EZTV",
    "longname": "src/providers/show/eztv.js~EZTV#_helper",
    "access": null,
    "description": "The helper object for adding shows.",
    "lineNumber": 34,
    "type": {
      "nullable": null,
      "types": [
        "Helper"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 162,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_util",
    "memberof": "src/providers/show/eztv.js~EZTV",
    "longname": "src/providers/show/eztv.js~EZTV#_util",
    "access": null,
    "description": "The util object with general functions.",
    "lineNumber": 40,
    "type": {
      "nullable": null,
      "types": [
        "Util"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 163,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_getShow",
    "memberof": "src/providers/show/eztv.js~EZTV",
    "longname": "src/providers/show/eztv.js~EZTV#_getShow",
    "access": null,
    "description": "Get a complete show.",
    "lineNumber": 48,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Show} - A complete show."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "eztvShow",
        "description": "show data from eztv."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Show"
      ],
      "spread": false,
      "description": "A complete show."
    },
    "generator": false
  },
  {
    "__docId__": 164,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "search",
    "memberof": "src/providers/show/eztv.js~EZTV",
    "longname": "src/providers/show/eztv.js~EZTV#search",
    "access": null,
    "description": "Returns a list of all the inserted torrents.",
    "lineNumber": 69,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array} - A list of scraped shows."
      }
    ],
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "A list of scraped shows."
    },
    "generator": false
  },
  {
    "__docId__": 165,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/providers/show/helper.js",
    "memberof": null,
    "longname": "src/providers/show/helper.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "// Import the neccesary modules.\r\nimport asyncq from \"async-q\";\r\n\r\nimport Show from \"../../models/Show\";\r\nimport Util from \"../../util\";\r\nimport { trakt } from \"../../config/constants\";\r\n\r\n/** Class for saving shows. */\r\nexport default class Helper {\r\n\r\n  /**\r\n   * Create an helper object.\r\n   * @param {String} name - The name of the helper.\r\n   */\r\n  constructor(name) {\r\n    /**\r\n     * The name of the torrent provider.\r\n     * @type {String}  The name of the torrent provider.\r\n     */\r\n    this.name = name;\r\n\r\n    /**\r\n     * The util object with general functions.\r\n     * @type {Util}\r\n     */\r\n    this._util = new Util();\r\n  };\r\n\r\n  /**\r\n   * Update the number of seasons of a given show\r\n   * @param {Show} show - The show to update the number of seasons.\r\n   * @returns {Show} - A newly updated show.\r\n   */\r\n  async _updateNumSeasons(show) {\r\n    const saved = await Show.findOneAndUpdate({\r\n      _id: show._id\r\n    }, show, {\r\n      new: true,\r\n      upsert: true\r\n    }).exec();\r\n    const distinct = await Show.distinct(\"episodes.season\", {\r\n      _id: saved._id\r\n    }).exec();\r\n    saved.num_seasons = distinct.length;\r\n    return await Show.findOneAndUpdate({\r\n      _id: saved._id\r\n    }, saved, {\r\n      new: true,\r\n      upsert: true\r\n    }).exec();\r\n  };\r\n\r\n  /**\r\n   * Update the torrents for an existing show.\r\n   * @param {Object} matching - The matching episode of new the show.\r\n   * @param {Object} found - The matching episode existing show.\r\n   * @param {Show} show - The show to merge the episodes to.\r\n   * @param {String} quality - The quality of the torrent.\r\n   * @returns {Show} - A show with merged torrents.\r\n   */\r\n  _updateEpisode(matching, found, show, quality) {\r\n    let index = show.episodes.indexOf(matching);\r\n\r\n    if (found.torrents[quality] && matching.torrents[quality]) {\r\n      let update = false;\r\n\r\n      if (found.torrents[quality].seeds > matching.torrents[quality].seeds) {\r\n        update = true;\r\n      } else if (matching.torrents[quality].seeds > found.torrents[quality].seeds) {\r\n        update = false;\r\n      } else if (found.torrents[quality].url === matching.torrents[quality].url) {\r\n        update = true;\r\n      }\r\n\r\n      if (update) {\r\n        if (quality === \"480p\") matching.torrents[\"0\"] = found.torrents[quality];\r\n        matching.torrents[quality] = found.torrents[quality];\r\n      }\r\n    } else if (found.torrents[quality] && !matching.torrents[quality]) {\r\n      if (quality === \"480p\") matching.torrents[\"0\"] = found.torrents[quality];\r\n      matching.torrents[quality] = found.torrents[quality];\r\n    }\r\n\r\n    show.episodes.splice(index, 1, matching);\r\n    return show;\r\n  };\r\n\r\n  /**\r\n   * Update a given show with it's associated episodes.\r\n   * @param {Show} show - The show to update its episodes.\r\n   * @returns {Show} - A newly updated show.\r\n   */\r\n  async _updateEpisodes(show) {\r\n    try {\r\n\r\n      const found = await Show.findOne({\r\n          _id: show._id\r\n        }).exec();\r\n      if (found) {\r\n        console.log(`${this.name}: '${found.title}' is an existing show.`);\r\n        for (let i = 0; i < found.episodes.length; i++) {\r\n          let matching = show.episodes\r\n            .filter(showEpisode => showEpisode.season === found.episodes[i].season)\r\n            .filter(showEpisode => showEpisode.episode === found.episodes[i].episode);\r\n\r\n          if (matching.length != 0) {\r\n            show = this._updateEpisode(matching[0], found.episodes[i], show, \"480p\");\r\n            show = this._updateEpisode(matching[0], found.episodes[i], show, \"720p\");\r\n            show = this._updateEpisode(matching[0], found.episodes[i], show, \"1080p\");\r\n          } else {\r\n            show.episodes.push(found.episodes[i]);\r\n          }\r\n        }\r\n\r\n        return await this._updateNumSeasons(show);\r\n      } else {\r\n        console.log(`${this.name}: '${show.title}' is a new show!`);\r\n        const newShow = await new Show(show).save();\r\n        return await this._updateNumSeasons(newShow);\r\n      }\r\n    } catch (err) {\r\n      return this._util.onError(err);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Adds one season to a show.\r\n   * @param {Show} show - The show to add the torrents to.\r\n   * @param {Object} episodes - The episodes containing the torrents.\r\n   * @param {Integer} seasonNumber - The season number.\r\n   * @param {String} slug - The slug of the show.\r\n   * @returns {Show} - A new show with seasons.\r\n   */\r\n  async _addSeason(show, episodes, seasonNumber, slug) {\r\n    try {\r\n      seasonNumber = parseInt(seasonNumber);\r\n      if (!isNaN(seasonNumber) && seasonNumber.toString().length <= 2) {\r\n        const season = await trakt.seasons.season({id: slug, season: seasonNumber, extended: \"full\"});\r\n        for (let episodeData in season) {\r\n          episodeData = season[episodeData];\r\n          if (episodes[seasonNumber] && episodes[seasonNumber][episodeData.number]) {\r\n            const episode = {\r\n              tvdb_id: episodeData.ids[\"tvdb\"],\r\n              season: episodeData.season,\r\n              episode: episodeData.number,\r\n              title: episodeData.title,\r\n              overview: episodeData.overview,\r\n              date_based: false,\r\n              first_aired: new Date(episodeData.first_aired).getTime() / 1000.0,\r\n              watched: {\r\n                watched: false\r\n              },\r\n              torrents: {}\r\n            };\r\n\r\n            if (episode.first_aired > show.latest_episode) show.latest_episode = episode.first_aired;\r\n\r\n            episode.torrents = episodes[seasonNumber][episodeData.number];\r\n            episode.torrents[0] = episodes[seasonNumber][episodeData.number][\"480p\"] ? episodes[seasonNumber][episodeData.number][\"480p\"] : episodes[seasonNumber][episodeData.number][\"720p\"];\r\n            show.episodes.push(episode);\r\n          }\r\n        }\r\n      }\r\n    } catch (err) {\r\n      return this._util.onError(`Trakt: Could not find any data on: ${err.path || err} with slug: '${slug}'`);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Get info from Trakt and make a new show object.\r\n   * @param {String} slug - The slug to query https://trakt.tv/.\r\n   * @returns {Show} - A new show without the episodes attached.\r\n   */\r\n  async getTraktInfo(slug) {\r\n    try {\r\n      const traktShow = await trakt.shows.summary({id: slug, extended: \"full,images\"});\r\n      const traktWatchers = await trakt.shows.watching({id: slug});\r\n\r\n      let watching = 0;\r\n      if (traktWatchers !== null) watching = traktWatchers.length;\r\n\r\n      if (traktShow && traktShow.ids[\"imdb\"]) {\r\n        return {\r\n          _id: traktShow.ids[\"imdb\"],\r\n          imdb_id: traktShow.ids[\"imdb\"],\r\n          tvdb_id: traktShow.ids[\"tvdb\"],\r\n          title: traktShow.title,\r\n          year: traktShow.year,\r\n          slug: traktShow.ids[\"slug\"],\r\n          synopsis: traktShow.overview,\r\n          runtime: traktShow.runtime,\r\n          rating: {\r\n            hated: 100,\r\n            loved: 100,\r\n            votes: traktShow.votes,\r\n            watching: watching,\r\n            percentage: Math.round(traktShow.rating * 10)\r\n          },\r\n          country: traktShow.country,\r\n          network: traktShow.network,\r\n          air_day: traktShow.airs.day,\r\n          air_time: traktShow.airs.time,\r\n          status: traktShow.status,\r\n          num_seasons: 0,\r\n          last_updated: Number(new Date()),\r\n          latest_episode: 0,\r\n          images: {\r\n            banner: traktShow.images.banner.full !== null ? traktShow.images.banner.full : \"images/posterholder.png\",\r\n            fanart: traktShow.images.fanart.full !== null ? traktShow.images.fanart.full : \"images/posterholder.png\",\r\n            poster: traktShow.images.poster.full !== null ? traktShow.images.poster.full : \"images/posterholder.png\"\r\n          },\r\n          genres: traktShow.genres !== null ? traktShow.genres : [\"unknown\"],\r\n          episodes: []\r\n        };\r\n      }\r\n    } catch (err) {\r\n      return this._util.onError(`Trakt: Could not find any data on: ${err.path || err} with slug: '${slug}'`);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Adds episodes to a show.\r\n   * @param {Show} show - The show to add the torrents to.\r\n   * @param {Object} episodes - The episodes containing the torrents.\r\n   * @param {String} slug - The slug of the show.\r\n   * @returns {Show} - A show with updated torrents.\r\n   */\r\n  async addEpisodes(show, episodes, slug) {\r\n    try {\r\n      await asyncq.each(Object.keys(episodes), seasonNumber => this._addSeason(show, episodes, seasonNumber, slug));\r\n      return await this._updateEpisodes(show);\r\n    } catch (err) {\r\n      return this._util.onError(err);\r\n    }\r\n  };\r\n\r\n};\r\n"
  },
  {
    "__docId__": 166,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Helper",
    "memberof": "src/providers/show/helper.js",
    "longname": "src/providers/show/helper.js~Helper",
    "access": null,
    "export": true,
    "importPath": "popcorn-api/src/providers/show/helper.js",
    "importStyle": "Helper",
    "description": "Class for saving shows.",
    "lineNumber": 9,
    "interface": false
  },
  {
    "__docId__": 167,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/providers/show/helper.js~Helper",
    "longname": "src/providers/show/helper.js~Helper#constructor",
    "access": null,
    "description": "Create an helper object.",
    "lineNumber": 15,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The name of the helper."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 168,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "name",
    "memberof": "src/providers/show/helper.js~Helper",
    "longname": "src/providers/show/helper.js~Helper#name",
    "access": null,
    "description": "The name of the torrent provider.",
    "lineNumber": 20,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 169,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_util",
    "memberof": "src/providers/show/helper.js~Helper",
    "longname": "src/providers/show/helper.js~Helper#_util",
    "access": null,
    "description": "The util object with general functions.",
    "lineNumber": 26,
    "type": {
      "nullable": null,
      "types": [
        "Util"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 170,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_updateNumSeasons",
    "memberof": "src/providers/show/helper.js~Helper",
    "longname": "src/providers/show/helper.js~Helper#_updateNumSeasons",
    "access": null,
    "description": "Update the number of seasons of a given show",
    "lineNumber": 34,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Show} - A newly updated show."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Show"
        ],
        "spread": false,
        "optional": false,
        "name": "show",
        "description": "The show to update the number of seasons."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Show"
      ],
      "spread": false,
      "description": "A newly updated show."
    },
    "generator": false
  },
  {
    "__docId__": 171,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_updateEpisode",
    "memberof": "src/providers/show/helper.js~Helper",
    "longname": "src/providers/show/helper.js~Helper#_updateEpisode",
    "access": null,
    "description": "Update the torrents for an existing show.",
    "lineNumber": 61,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Show} - A show with merged torrents."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "matching",
        "description": "The matching episode of new the show."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "found",
        "description": "The matching episode existing show."
      },
      {
        "nullable": null,
        "types": [
          "Show"
        ],
        "spread": false,
        "optional": false,
        "name": "show",
        "description": "The show to merge the episodes to."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "quality",
        "description": "The quality of the torrent."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Show"
      ],
      "spread": false,
      "description": "A show with merged torrents."
    },
    "generator": false
  },
  {
    "__docId__": 172,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_updateEpisodes",
    "memberof": "src/providers/show/helper.js~Helper",
    "longname": "src/providers/show/helper.js~Helper#_updateEpisodes",
    "access": null,
    "description": "Update a given show with it's associated episodes.",
    "lineNumber": 93,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Show} - A newly updated show."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Show"
        ],
        "spread": false,
        "optional": false,
        "name": "show",
        "description": "The show to update its episodes."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Show"
      ],
      "spread": false,
      "description": "A newly updated show."
    },
    "generator": false
  },
  {
    "__docId__": 173,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_addSeason",
    "memberof": "src/providers/show/helper.js~Helper",
    "longname": "src/providers/show/helper.js~Helper#_addSeason",
    "access": null,
    "description": "Adds one season to a show.",
    "lineNumber": 134,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Show} - A new show with seasons."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Show"
        ],
        "spread": false,
        "optional": false,
        "name": "show",
        "description": "The show to add the torrents to."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "episodes",
        "description": "The episodes containing the torrents."
      },
      {
        "nullable": null,
        "types": [
          "Integer"
        ],
        "spread": false,
        "optional": false,
        "name": "seasonNumber",
        "description": "The season number."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "slug",
        "description": "The slug of the show."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Show"
      ],
      "spread": false,
      "description": "A new show with seasons."
    },
    "generator": false
  },
  {
    "__docId__": 174,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getTraktInfo",
    "memberof": "src/providers/show/helper.js~Helper",
    "longname": "src/providers/show/helper.js~Helper#getTraktInfo",
    "access": null,
    "description": "Get info from Trakt and make a new show object.",
    "lineNumber": 174,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Show} - A new show without the episodes attached."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "slug",
        "description": "The slug to query https://trakt.tv/."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Show"
      ],
      "spread": false,
      "description": "A new show without the episodes attached."
    },
    "generator": false
  },
  {
    "__docId__": 175,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "addEpisodes",
    "memberof": "src/providers/show/helper.js~Helper",
    "longname": "src/providers/show/helper.js~Helper#addEpisodes",
    "access": null,
    "description": "Adds episodes to a show.",
    "lineNumber": 228,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Show} - A show with updated torrents."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Show"
        ],
        "spread": false,
        "optional": false,
        "name": "show",
        "description": "The show to add the torrents to."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "episodes",
        "description": "The episodes containing the torrents."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "slug",
        "description": "The slug of the show."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Show"
      ],
      "spread": false,
      "description": "A show with updated torrents."
    },
    "generator": false
  },
  {
    "__docId__": 176,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/providers/show/kat.js",
    "memberof": null,
    "longname": "src/providers/show/kat.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "// Import the neccesary modules.\r\nimport asyncq from \"async-q\";\r\nimport KatAPI from \"kat-api-pt\";\r\nimport { maxWebRequest, katShowMap } from \"../../config/constants\";\r\nimport Helper from \"./helper\";\r\nimport Util from \"../../util\";\r\n\r\n/** Class for scraping shows from https://kat.cr/. */\r\nexport default class KAT {\r\n\r\n   /**\r\n    * Create a kat object.\r\n    * @param {String} name - The name of the torrent provider.\r\n    * @param {Boolean} debug - Debug mode for extra output.\r\n    */\r\n  constructor(name, debug) {\r\n    /**\r\n     * The name of the torrent provider.\r\n     * @type {String}  The name of the torrent provider.\r\n     */\r\n    this.name = name;\r\n\r\n    /**\r\n     * The helper object for adding shows.\r\n     * @type {Helper}\r\n     */\r\n    this._helper = new Helper(this.name);\r\n\r\n    /**\r\n     * A configured KAT API.\r\n     * @type {KatAPI}\r\n     * @see https://github.com/ChrisAlderson/kat-api-pt\r\n     */\r\n    this._kat = new KatAPI({ debug });\r\n\r\n    /**\r\n     * The util object with general functions.\r\n     * @type {Util}\r\n     */\r\n    this._util = new Util();\r\n\r\n  };\r\n\r\n  /**\r\n   * Get all the shows.\r\n   * @param {Object} katShow - The show information.\r\n   * @returns {Show} - A show.\r\n   */\r\n  async _getShow(katShow) {\r\n    try {\r\n      const newShow = await this._helper.getTraktInfo(katShow.slug);\r\n      if (newShow && newShow._id) {\r\n        const slug = katShow.slug;\r\n\r\n        delete katShow.showTitle;\r\n        delete katShow.slug;\r\n        delete katShow.torrentLink;\r\n        delete katShow.season;\r\n        delete katShow.episode;\r\n        delete katShow.quality;\r\n        delete katShow.dateBased;\r\n        delete katShow[0];\r\n        return await this._helper.addEpisodes(newShow, katShow, slug);\r\n      }\r\n    } catch (err) {\r\n      return this._util.onError(err);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Extract show information based on a regex.\r\n   * @param {Object} torrent - The torrent to extract the show information from.\r\n   * @param {Regex} regex - The regex to extract the show information.\r\n   * @param {Boolean} dateBased - Check for dateBased episodes.\r\n   * @returns {Object} - Information about a show from the torrent.\r\n   */\r\n  _extractShow(torrent, regex, dateBased) {\r\n    let showTitle = torrent.title.match(regex)[1];\r\n    if (showTitle.endsWith(\" \")) showTitle = showTitle.substring(0, showTitle.length - 1);\r\n    showTitle = showTitle.replace(/\\./g, \" \");\r\n    let slug = showTitle.replace(/\\s+/g, \"-\").toLowerCase();\r\n    slug = slug in katShowMap ? katShowMap[slug] : slug;\r\n    let season = torrent.title.match(regex)[2];\r\n    let episode = torrent.title.match(regex)[3];\r\n    if (!dateBased) {\r\n      season = parseInt(season, 10);\r\n      episode = parseInt(episode, 10);\r\n    }\r\n    const quality = torrent.title.match(/(\\d{3,4})p/) !== null ? torrent.title.match(/(\\d{3,4})p/)[0] : \"480p\";\r\n\r\n    const episodeTorrent = {\r\n      url: torrent.magnet,\r\n      seeds: torrent.seeds,\r\n      peers: torrent.peers,\r\n      provider: this.name\r\n    };\r\n\r\n    const show = { showTitle, slug, torrentLink: torrent.link, season, episode, quality, dateBased };\r\n\r\n    if (!show[season]) show[season] = {};\r\n    if (!show[season][episode]) show[season][episode] = {};\r\n    if ((!show[season][episode][quality] || show.showTitle.toLowerCase().indexOf(\"repack\") > -1) || (show[season][episode][quality] && show[season][episode][quality].seeds < episodeTorrent.seeds))\r\n      show[season][episode][quality] = episodeTorrent;\r\n\r\n    return show;\r\n  };\r\n\r\n  /**\r\n   * Get show info from a given torrent.\r\n   * @param {Object} torrent - A torrent object to extract show information from.\r\n   * @returns {Object} - Information about a show from the torrent.\r\n   */\r\n  _getShowData(torrent) {\r\n    const seasonBased = /(.*).[sS](\\d{2})[eE](\\d{2})/;\r\n    const vtv = /(.*).(\\d{1,2})[x](\\d{2})/;\r\n    const dateBased = /(.*).(\\d{4}).(\\d{2}.\\d{2})/;\r\n    if (torrent.title.match(seasonBased)) {\r\n      return this._extractShow(torrent, seasonBased, false);\r\n    } else if (torrent.title.match(vtv)) {\r\n      return this._extractShow(torrent, vtv, false);\r\n    } else if (torrent.title.match(dateBased)) {\r\n      return this._extractShow(torrent, dateBased, true);\r\n    } else {\r\n      console.warn(`${this.name}: Could not find data from torrent: '${torrent.title}'`);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Puts all the found shows from the torrents in an array.\r\n   * @param {Array} torrents - A list of torrents to extract show information.\r\n   * @returns {Array} - A list of objects with show information extracted from the torrents.\r\n   */\r\n  async _getAllKATShows(torrents) {\r\n    try {\r\n      const shows = [];\r\n\r\n      await asyncq.mapSeries(torrents, torrent => {\r\n        if (torrent) {\r\n          const show = this._getShowData(torrent);\r\n          if (show) {\r\n            if (shows.length != 0) {\r\n              const { showTitle, slug, season, episode, quality } = show;\r\n              const matching = shows\r\n                .filter(s => s.showTitle === showTitle)\r\n                .filter(s => s.slug === slug);\r\n\r\n              if (matching.length != 0) {\r\n                const index = shows.indexOf(matching[0]);\r\n                if (!matching[0][season]) matching[0][season] = {};\r\n                if (!matching[0][season][episode]) matching[0][season][episode] = {};\r\n                if ((!matching[0][season][episode][quality] || matching[0].showTitle.toLowerCase().indexOf(\"repack\") > -1) || (matching[0][season][episode][quality] && matching[0][season][episode][quality].seeds < show[season][episode][quality].seeds))\r\n                  matching[0][season][episode][quality] = show[season][episode][quality];\r\n\r\n                shows.splice(index, 1, matching[0]);\r\n              } else {\r\n                shows.push(show);\r\n              }\r\n            } else {\r\n              shows.push(show);\r\n            }\r\n          }\r\n        }\r\n      });\r\n\r\n      return shows;\r\n    } catch (err) {\r\n      this._util.onError(err);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Get all the torrents of a given provider.\r\n   * @param {Integer} totalPages - The total pages of the query.\r\n   * @param {Object} provider - The provider to query https://kat.cr/.\r\n   * @returns {Array} - A list of all the queried torrents.\r\n   */\r\n  async _getAllTorrents(totalPages, provider) {\r\n    try {\r\n      let katTorrents = [];\r\n      await asyncq.timesSeries(totalPages, async page => {\r\n        try {\r\n          provider.query.page = page + 1;\r\n          console.log(`${this.name}: Starting searching KAT on page ${provider.query.page} out of ${totalPages}`);\r\n          const result = await this._kat.search(provider.query);\r\n          katTorrents = katTorrents.concat(result.results);\r\n        } catch (err) {\r\n          return this._util.onError(err);\r\n        }\r\n      });\r\n      console.log(`${this.name}: Found ${katTorrents.length} torrents.`);\r\n      return katTorrents;\r\n    } catch (err) {\r\n      return this._util.onError(err);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Returns a list of all the inserted torrents.\r\n   * @param {Object} provider - The provider to query https://kat.cr/.\r\n   * @returns {Array} - A list of scraped shows.\r\n   */\r\n  async search(provider) {\r\n    try {\r\n      console.log(`${this.name} : Starting scraping...`);\r\n      provider.query.page = 1;\r\n      provider.query.category = \"tv\";\r\n      provider.query.verified = 1;\r\n      provider.query.adult_filter = 1;\r\n      provider.query.language = \"en\";\r\n\r\n      const getTotalPages = await this._kat.search(provider.query);\r\n      const totalPages = getTotalPages.totalPages; // Change to 'const' for production.\r\n      if (!totalPages) return this._util.onError(`${this.name}: totalPages returned; '${totalPages}'`);\r\n      // totalPages = 3; // For testing purposes only.\r\n      console.log(`${this.name}: Total pages ${totalPages}`);\r\n\r\n      const katTorrents = await this._getAllTorrents(totalPages, provider);\r\n      const katShows = await this._getAllKATShows(katTorrents);\r\n      return await asyncq.mapLimit(katShows, maxWebRequest, async katShow => {\r\n        try {\r\n          return await this._getShow(katShow);\r\n        } catch (err) {\r\n          return this._util.onError(err);\r\n        }\r\n      });\r\n    } catch (err) {\r\n      return this._util.onError(err);\r\n    }\r\n  };\r\n\r\n};\r\n"
  },
  {
    "__docId__": 177,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "KAT",
    "memberof": "src/providers/show/kat.js",
    "longname": "src/providers/show/kat.js~KAT",
    "access": null,
    "export": true,
    "importPath": "popcorn-api/src/providers/show/kat.js",
    "importStyle": "KAT",
    "description": "Class for scraping shows from https://kat.cr/.",
    "lineNumber": 9,
    "interface": false
  },
  {
    "__docId__": 178,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/providers/show/kat.js~KAT",
    "longname": "src/providers/show/kat.js~KAT#constructor",
    "access": null,
    "description": "Create a kat object.",
    "lineNumber": 16,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The name of the torrent provider."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "debug",
        "description": "Debug mode for extra output."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 179,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "name",
    "memberof": "src/providers/show/kat.js~KAT",
    "longname": "src/providers/show/kat.js~KAT#name",
    "access": null,
    "description": "The name of the torrent provider.",
    "lineNumber": 21,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 180,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_helper",
    "memberof": "src/providers/show/kat.js~KAT",
    "longname": "src/providers/show/kat.js~KAT#_helper",
    "access": null,
    "description": "The helper object for adding shows.",
    "lineNumber": 27,
    "type": {
      "nullable": null,
      "types": [
        "Helper"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 181,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_kat",
    "memberof": "src/providers/show/kat.js~KAT",
    "longname": "src/providers/show/kat.js~KAT#_kat",
    "access": null,
    "description": "A configured KAT API.",
    "see": [
      "https://github.com/ChrisAlderson/kat-api-pt"
    ],
    "lineNumber": 34,
    "type": {
      "nullable": null,
      "types": [
        "KatAPI"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 182,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_util",
    "memberof": "src/providers/show/kat.js~KAT",
    "longname": "src/providers/show/kat.js~KAT#_util",
    "access": null,
    "description": "The util object with general functions.",
    "lineNumber": 40,
    "type": {
      "nullable": null,
      "types": [
        "Util"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 183,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_getShow",
    "memberof": "src/providers/show/kat.js~KAT",
    "longname": "src/providers/show/kat.js~KAT#_getShow",
    "access": null,
    "description": "Get all the shows.",
    "lineNumber": 49,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Show} - A show."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "katShow",
        "description": "The show information."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Show"
      ],
      "spread": false,
      "description": "A show."
    },
    "generator": false
  },
  {
    "__docId__": 184,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_extractShow",
    "memberof": "src/providers/show/kat.js~KAT",
    "longname": "src/providers/show/kat.js~KAT#_extractShow",
    "access": null,
    "description": "Extract show information based on a regex.",
    "lineNumber": 77,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} - Information about a show from the torrent."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "torrent",
        "description": "The torrent to extract the show information from."
      },
      {
        "nullable": null,
        "types": [
          "Regex"
        ],
        "spread": false,
        "optional": false,
        "name": "regex",
        "description": "The regex to extract the show information."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "dateBased",
        "description": "Check for dateBased episodes."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "Information about a show from the torrent."
    },
    "generator": false
  },
  {
    "__docId__": 185,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_getShowData",
    "memberof": "src/providers/show/kat.js~KAT",
    "longname": "src/providers/show/kat.js~KAT#_getShowData",
    "access": null,
    "description": "Get show info from a given torrent.",
    "lineNumber": 113,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} - Information about a show from the torrent."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "torrent",
        "description": "A torrent object to extract show information from."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "Information about a show from the torrent."
    },
    "generator": false
  },
  {
    "__docId__": 186,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_getAllKATShows",
    "memberof": "src/providers/show/kat.js~KAT",
    "longname": "src/providers/show/kat.js~KAT#_getAllKATShows",
    "access": null,
    "description": "Puts all the found shows from the torrents in an array.",
    "lineNumber": 133,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array} - A list of objects with show information extracted from the torrents."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "torrents",
        "description": "A list of torrents to extract show information."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "A list of objects with show information extracted from the torrents."
    },
    "generator": false
  },
  {
    "__docId__": 187,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_getAllTorrents",
    "memberof": "src/providers/show/kat.js~KAT",
    "longname": "src/providers/show/kat.js~KAT#_getAllTorrents",
    "access": null,
    "description": "Get all the torrents of a given provider.",
    "lineNumber": 177,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array} - A list of all the queried torrents."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Integer"
        ],
        "spread": false,
        "optional": false,
        "name": "totalPages",
        "description": "The total pages of the query."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "provider",
        "description": "The provider to query https://kat.cr/."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "A list of all the queried torrents."
    },
    "generator": false
  },
  {
    "__docId__": 188,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "search",
    "memberof": "src/providers/show/kat.js~KAT",
    "longname": "src/providers/show/kat.js~KAT#search",
    "access": null,
    "description": "Returns a list of all the inserted torrents.",
    "lineNumber": 202,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array} - A list of scraped shows."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "provider",
        "description": "The provider to query https://kat.cr/."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "A list of scraped shows."
    },
    "generator": false
  },
  {
    "__docId__": 189,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/scraper.js",
    "memberof": null,
    "longname": "src/scraper.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "// Import the neccesary modules.\r\nimport asyncq from \"async-q\";\r\nimport { animeProviders, movieProviders, showProviders } from \"./config/constants\";\r\nimport EZTV from \"./providers/show/eztv\";\r\nimport HorribleSubs from \"./providers/anime/horriblesubs\";\r\nimport katAnime from \"./providers/anime/kat\";\r\nimport katMovie from \"./providers/movie/kat\";\r\nimport katShow from \"./providers/show/kat\";\r\nimport Util from \"./util\";\r\nimport YTS from \"./providers/movie/yts\";\r\n\r\n/** Class for scraping movies and shows. */\r\nexport default class Scraper {\r\n\r\n  /**\r\n   * Create a scraper object.\r\n   * @param {Boolean} debug - Debug mode for extra output.\r\n   */\r\n  constructor(debug) {\r\n    /**\r\n     * The util object with general functions.\r\n     * @property {Object}\r\n     */\r\n    Scraper._util = new Util();\r\n\r\n    /**\r\n     * Debug mode for extra output.\r\n     * @type {Object}\r\n     */\r\n    Scraper._debug = debug;\r\n  };\r\n\r\n  /**\r\n   * Start scraping from EZTV.\r\n   * @returns {Array} A list of all the scraped shows.\r\n   */\r\n  async _scrapeEZTVShows() {\r\n    try {\r\n      const eztv = new EZTV(\"EZTV\", Scraper._debug);\r\n      Scraper._util.setStatus(`Scraping ${eztv.name}`);\r\n      const eztvShows = await eztv.search();\r\n      console.log(`${eztv.name}: Done.`);\r\n      return eztvShows;\r\n    } catch (err) {\r\n      return Scraper._util.onError(err);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Start movie scraping from KAT.\r\n   * @returns {Array} A list of all the scraped movies.\r\n   */\r\n  _scrapeKATMovies() {\r\n    return asyncq.eachSeries(movieProviders, async provider => {\r\n      try {\r\n        Scraper._util.setStatus(`Scraping ${provider.name}`);\r\n        const katProvider = new katMovie(provider.name, Scraper._debug);\r\n        const katShows = await katProvider.search(provider);\r\n        console.log(`${provider.name}: Done.`);\r\n        return katShows;\r\n      } catch (err) {\r\n        return Scraper._util.onError(err);\r\n      }\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Start show scraping from KAT.\r\n   * @returns {Array} A list of all the scraped shows.\r\n   */\r\n  _scrapeKATShows() {\r\n    return asyncq.eachSeries(showProviders, async provider => {\r\n      try {\r\n        Scraper._util.setStatus(`Scraping ${provider.name}`);\r\n        const katProvider = new katShow(provider.name, Scraper._debug);\r\n        const katShows = await katProvider.search(provider);\r\n        console.log(`${provider.name}: Done.`);\r\n        return katShows;\r\n      } catch (err) {\r\n        return Scraper._util.onError(err);\r\n      }\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Start scraping from YTS.\r\n   * @returns {Array} A list of all the scraped movies.\r\n   */\r\n  async _scrapeYTSMovies() {\r\n    try {\r\n      const yts = new YTS(\"YTS\");\r\n      Scraper._util.setStatus(`Scraping ${yts.name}`);\r\n      const ytsMovies = await yts.search();\r\n      console.log(`${yts.name}: Done.`);\r\n      return ytsMovies;\r\n    } catch (err) {\r\n      return Scraper._util.onError(err);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Start scraping from HorribleSubs.\r\n   * @returns {Array} A list of all the scraped anime.\r\n   */\r\n  async _scrapeHorribelSubsAnime() {\r\n    try {\r\n      const horribleSubs = new HorribleSubs(\"HorribleSubs\", Scraper._debug);\r\n      Scraper._util.setStatus(`Scraping ${horribleSubs.name}`);\r\n      const horribleSubsAnime = await horribleSubs.search();\r\n      console.log(`${horribleSubs.name}: Done.`);\r\n      return horribleSubsAnime;\r\n    } catch (err) {\r\n      return Scraper._util.onError(err);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Start scraping from KAT.\r\n   * @returns {Array} A list of all the scraped anime.\r\n   */\r\n  async _scrapeKATAnime() {\r\n    return asyncq.eachSeries(animeProviders, async provider => {\r\n      try {\r\n        Scraper._util.setStatus(`Scraping ${provider.name}`);\r\n        const katProvider = new katAnime(provider.name, Scraper._debug);\r\n        const katAnimes = await katProvider.search(provider);\r\n        console.log(`${provider.name}: Done.`);\r\n        return katAnimes;\r\n      } catch (err) {\r\n        return Scraper._util.onError(err);\r\n      }\r\n    });\r\n  }\r\n\r\n  /** Initiate the scraping for EZTV and KAT. */\r\n  scrape() {\r\n    Scraper._util.setLastUpdated();\r\n\r\n    asyncq.eachSeries([\r\n      //this._scrapeEZTVShows,\r\n      // this._scrapeKATShows,\r\n      //this._scrapeYTSMovies,\r\n      // this._scrapeKATMovies,\r\n      this._scrapeHorribelSubsAnime,\r\n      // this._scrapeKATAnime\r\n    ], scraper => scraper()).then(value => Scraper._util.setStatus())\r\n      .catch(err => Scraper._util.onError(`Error while scraping: ${err}`));\r\n  };\r\n\r\n};\r\n"
  },
  {
    "__docId__": 190,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Scraper",
    "memberof": "src/scraper.js",
    "longname": "src/scraper.js~Scraper",
    "access": null,
    "export": true,
    "importPath": "popcorn-api/src/scraper.js",
    "importStyle": "Scraper",
    "description": "Class for scraping movies and shows.",
    "lineNumber": 13,
    "interface": false
  },
  {
    "__docId__": 191,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/scraper.js~Scraper",
    "longname": "src/scraper.js~Scraper#constructor",
    "access": null,
    "description": "Create a scraper object.",
    "lineNumber": 19,
    "params": [
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "debug",
        "description": "Debug mode for extra output."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 192,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_scrapeEZTVShows",
    "memberof": "src/scraper.js~Scraper",
    "longname": "src/scraper.js~Scraper#_scrapeEZTVShows",
    "access": null,
    "description": "Start scraping from EZTV.",
    "lineNumber": 37,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array} A list of all the scraped shows."
      }
    ],
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "A list of all the scraped shows."
    },
    "generator": false
  },
  {
    "__docId__": 193,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_scrapeKATMovies",
    "memberof": "src/scraper.js~Scraper",
    "longname": "src/scraper.js~Scraper#_scrapeKATMovies",
    "access": null,
    "description": "Start movie scraping from KAT.",
    "lineNumber": 53,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array} A list of all the scraped movies."
      }
    ],
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "A list of all the scraped movies."
    },
    "generator": false
  },
  {
    "__docId__": 194,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_scrapeKATShows",
    "memberof": "src/scraper.js~Scraper",
    "longname": "src/scraper.js~Scraper#_scrapeKATShows",
    "access": null,
    "description": "Start show scraping from KAT.",
    "lineNumber": 71,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array} A list of all the scraped shows."
      }
    ],
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "A list of all the scraped shows."
    },
    "generator": false
  },
  {
    "__docId__": 195,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_scrapeYTSMovies",
    "memberof": "src/scraper.js~Scraper",
    "longname": "src/scraper.js~Scraper#_scrapeYTSMovies",
    "access": null,
    "description": "Start scraping from YTS.",
    "lineNumber": 89,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array} A list of all the scraped movies."
      }
    ],
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "A list of all the scraped movies."
    },
    "generator": false
  },
  {
    "__docId__": 196,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_scrapeHorribelSubsAnime",
    "memberof": "src/scraper.js~Scraper",
    "longname": "src/scraper.js~Scraper#_scrapeHorribelSubsAnime",
    "access": null,
    "description": "Start scraping from HorribleSubs.",
    "lineNumber": 105,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array} A list of all the scraped anime."
      }
    ],
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "A list of all the scraped anime."
    },
    "generator": false
  },
  {
    "__docId__": 197,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_scrapeKATAnime",
    "memberof": "src/scraper.js~Scraper",
    "longname": "src/scraper.js~Scraper#_scrapeKATAnime",
    "access": null,
    "description": "Start scraping from KAT.",
    "lineNumber": 121,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array} A list of all the scraped anime."
      }
    ],
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "A list of all the scraped anime."
    },
    "generator": false
  },
  {
    "__docId__": 198,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "scrape",
    "memberof": "src/scraper.js~Scraper",
    "longname": "src/scraper.js~Scraper#scrape",
    "access": null,
    "description": "Initiate the scraping for EZTV and KAT.",
    "lineNumber": 136,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 199,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/util.js",
    "memberof": null,
    "longname": "src/util.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "// Import the neccesary modules.\r\nimport childProcess from \"child_process\";\r\nimport fs from \"fs\";\r\nimport path from \"path\";\r\n\r\nimport { statusFile, tempDir, traktKey, updatedFile } from \"./config/constants\";\r\nimport { name } from \"../package.json\";\r\n\r\n/** Class holding the frequently used functions. */\r\nexport default class Util {\r\n\r\n  /**\r\n   * Create an emty file.\r\n   * @param {String} path - The path to the file to create.\r\n   */\r\n  _createEmptyFile(path) {\r\n    fs.createWriteStream(path).end();\r\n  };\r\n\r\n  /** Create the temporary directory. */\r\n  createTemp() {\r\n    if (!fs.existsSync(tempDir)) fs.mkdirSync(tempDir);\r\n    if (fs.existsSync(tempDir)) this._resetTemp();\r\n\r\n    this._createEmptyFile(path.join(tempDir, statusFile));\r\n    this._createEmptyFile(path.join(tempDir, updatedFile));\r\n  };\r\n\r\n  /**\r\n   * Execute a command from within the root folder.\r\n   * @param {String} cmd - The command to execute.\r\n   * @returns {String} - The output of the command.\r\n   */\r\n  executeCommand(cmd) {\r\n    return new Promise((resolve, reject) => {\r\n      childProcess.exec(cmd, {cwd: __dirname}, (err, stdout, stderr) => {\r\n        if (err) return reject(err);\r\n        return resolve(stdout.split(\"\\n\").join(\"\"));\r\n      });\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Error logger function.\r\n   * @param {String} errorMessage - The error message you want to display.\r\n   * @returns {Error} - A new error with the given error message.\r\n   */\r\n  onError(errorMessage) {\r\n    console.error(errorMessage);\r\n    return new Error(errorMessage);\r\n  };\r\n\r\n  /** Reset the default log file. */\r\n  resetLog() {\r\n    const logFile = path.join(tempDir, `${name}.log`);\r\n    if (fs.existsSync(logFile)) fs.unlinkSync(logFile);\r\n  };\r\n\r\n  /**\r\n   * Removes all the files in the temporary directory.\r\n   * @param {String} [tmpPath=popcorn-api/tmp] - The path to remove all the files within (Default is set in the `config/constants.js`).\r\n   */\r\n  _resetTemp(tmpPath = tempDir) {\r\n    const files = fs.readdirSync(tmpPath);\r\n    files.forEach(file => {\r\n      const stats = fs.statSync(path.join(tmpPath, file));\r\n      if (stats.isDirectory()) {\r\n        this.resetTemp(file);\r\n      } else if (stats.isFile()) {\r\n        fs.unlinkSync(path.join(tmpPath, file));\r\n      }\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Search for a key in an array of object.\r\n   * @param {String} key - The key to search for.\r\n   * @param {String} value - The value of the key to search for.\r\n   * @return {Object} - The object with the correct key-value pair.\r\n   */\r\n  search(key, value) {\r\n    return element => element[key] === value;\r\n  };\r\n\r\n  /**\r\n   * Updates the `lastUpdated.json` file.\r\n   * @param {String} [updated=Date.now()] - The epoch time when the API last started scraping.\r\n   */\r\n  setLastUpdated(updated = (Math.floor(new Date().getTime() / 1000))) {\r\n    fs.writeFile(path.join(tempDir, updatedFile), JSON.stringify({ updated }));\r\n  };\r\n\r\n  /**\r\n   * Updates the `status.json` file.\r\n   * @param {String} [status=Idle] - The status which will be set to in the `status.json` file.\r\n   */\r\n  setStatus(status = \"Idle\") {\r\n    fs.writeFile(path.join(tempDir, statusFile), JSON.stringify({ status }));\r\n  };\r\n\r\n};\r\n"
  },
  {
    "__docId__": 200,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Util",
    "memberof": "src/util.js",
    "longname": "src/util.js~Util",
    "access": null,
    "export": true,
    "importPath": "popcorn-api/src/util.js",
    "importStyle": "Util",
    "description": "Class holding the frequently used functions.",
    "lineNumber": 10,
    "interface": false
  },
  {
    "__docId__": 201,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_createEmptyFile",
    "memberof": "src/util.js~Util",
    "longname": "src/util.js~Util#_createEmptyFile",
    "access": null,
    "description": "Create an emty file.",
    "lineNumber": 16,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": "The path to the file to create."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 202,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "createTemp",
    "memberof": "src/util.js~Util",
    "longname": "src/util.js~Util#createTemp",
    "access": null,
    "description": "Create the temporary directory.",
    "lineNumber": 21,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 203,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "executeCommand",
    "memberof": "src/util.js~Util",
    "longname": "src/util.js~Util#executeCommand",
    "access": null,
    "description": "Execute a command from within the root folder.",
    "lineNumber": 34,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{String} - The output of the command."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "cmd",
        "description": "The command to execute."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "The output of the command."
    },
    "generator": false
  },
  {
    "__docId__": 204,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "onError",
    "memberof": "src/util.js~Util",
    "longname": "src/util.js~Util#onError",
    "access": null,
    "description": "Error logger function.",
    "lineNumber": 48,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Error} - A new error with the given error message."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "errorMessage",
        "description": "The error message you want to display."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Error"
      ],
      "spread": false,
      "description": "A new error with the given error message."
    },
    "generator": false
  },
  {
    "__docId__": 205,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "resetLog",
    "memberof": "src/util.js~Util",
    "longname": "src/util.js~Util#resetLog",
    "access": null,
    "description": "Reset the default log file.",
    "lineNumber": 54,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 206,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_resetTemp",
    "memberof": "src/util.js~Util",
    "longname": "src/util.js~Util#_resetTemp",
    "access": null,
    "description": "Removes all the files in the temporary directory.",
    "lineNumber": 63,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "popcorn-api/tmp",
        "defaultRaw": "popcorn-api/tmp",
        "name": "tmpPath",
        "description": "The path to remove all the files within (Default is set in the `config/constants.js`)."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 207,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "search",
    "memberof": "src/util.js~Util",
    "longname": "src/util.js~Util#search",
    "access": null,
    "description": "Search for a key in an array of object.",
    "lineNumber": 81,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": "The key to search for."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "The value of the key to search for."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "The object with the correct key-value pair."
    },
    "generator": false
  },
  {
    "__docId__": 208,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "setLastUpdated",
    "memberof": "src/util.js~Util",
    "longname": "src/util.js~Util#setLastUpdated",
    "access": null,
    "description": "Updates the `lastUpdated.json` file.",
    "lineNumber": 89,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "Date.now()",
        "defaultRaw": "Date.now()",
        "name": "updated",
        "description": "The epoch time when the API last started scraping."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 209,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "setStatus",
    "memberof": "src/util.js~Util",
    "longname": "src/util.js~Util#setStatus",
    "access": null,
    "description": "Updates the `status.json` file.",
    "lineNumber": 97,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "Idle",
        "defaultRaw": "Idle",
        "name": "status",
        "description": "The status which will be set to in the `status.json` file."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 211,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Infinity",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 212,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~NaN",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 213,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~undefined",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 214,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~null",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 215,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Object",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 216,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~object",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 217,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Function",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 218,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~function",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 219,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Boolean",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 220,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~boolean",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 221,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Symbol",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 222,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Error",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 223,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~EvalError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 224,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~InternalError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 225,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~RangeError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 226,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~ReferenceError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 227,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~SyntaxError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 228,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~TypeError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 229,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~URIError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 230,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Number",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 231,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~number",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 232,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Date",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 233,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~String",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 234,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~string",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 235,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~RegExp",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 236,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 237,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int8Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 238,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint8Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 239,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint8ClampedArray",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 240,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int16Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 241,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint16Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 242,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int32Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 243,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint32Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 244,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Float32Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 245,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Float64Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 246,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Map",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 247,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Set",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 248,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~WeakMap",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 249,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~WeakSet",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 250,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~ArrayBuffer",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 251,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~DataView",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 252,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~JSON",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 253,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Promise",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 254,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Generator",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 255,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~GeneratorFunction",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 256,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Reflect",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 257,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Proxy",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 259,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "CanvasRenderingContext2D",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~CanvasRenderingContext2D",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 260,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "DocumentFragment",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~DocumentFragment",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 261,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Element",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Element",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~Element",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 262,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Event",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Event",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~Event",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 263,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Node",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Node",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~Node",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 264,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "NodeList",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/NodeList",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~NodeList",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 265,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "XMLHttpRequest",
    "externalLink": "https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequest",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~XMLHttpRequest",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 266,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "AudioContext",
    "externalLink": "https://developer.mozilla.org/en/docs/Web/API/AudioContext",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~AudioContext",
    "access": null,
    "description": "",
    "builtinExternal": true
  }
]